
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002130  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002344  08002344  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002344  08002344  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002344  08002344  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800234c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000060  080023ac  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  080023ac  00020488  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016af  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000054d  00000000  00000000  0002177c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00021cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013c  00000000  00000000  00021e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000282c  00000000  00000000  00021fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a7c  00000000  00000000  000247e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a121  00000000  00000000  00026264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000118c  00000000  00000000  00030388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00031514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080022e8 	.word	0x080022e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080022e8 	.word	0x080022e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <SPI2_GPIOInits+0x58>)
 80002b8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002ba:	2302      	movs	r3, #2
 80002bc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002be:	2305      	movs	r3, #5
 80002c0:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002c2:	2300      	movs	r3, #0
 80002c4:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002c6:	2300      	movs	r3, #0
 80002c8:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ca:	2302      	movs	r3, #2
 80002cc:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002ce:	230d      	movs	r3, #13
 80002d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f000 fa0d 	bl	80006f4 <GPIO_Init>

	//MOSI
    SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80002da:	230f      	movs	r3, #15
 80002dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f000 fa07 	bl	80006f4 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80002e6:	230e      	movs	r3, #14
 80002e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fa01 	bl	80006f4 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002f2:	230c      	movs	r3, #12
 80002f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 f9fb 	bl	80006f4 <GPIO_Init>


}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	40020400 	.word	0x40020400

0800030c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	SPI2handle.pSPIx = SPI2;
 8000310:	4b0e      	ldr	r3, [pc, #56]	; (800034c <SPI2_Inits+0x40>)
 8000312:	4a0f      	ldr	r2, [pc, #60]	; (8000350 <SPI2_Inits+0x44>)
 8000314:	601a      	str	r2, [r3, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000316:	4b0d      	ldr	r3, [pc, #52]	; (800034c <SPI2_Inits+0x40>)
 8000318:	2201      	movs	r2, #1
 800031a:	715a      	strb	r2, [r3, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <SPI2_Inits+0x40>)
 800031e:	2201      	movs	r2, #1
 8000320:	711a      	strb	r2, [r3, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <SPI2_Inits+0x40>)
 8000324:	2204      	movs	r2, #4
 8000326:	719a      	strb	r2, [r3, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <SPI2_Inits+0x40>)
 800032a:	2200      	movs	r2, #0
 800032c:	71da      	strb	r2, [r3, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <SPI2_Inits+0x40>)
 8000330:	2200      	movs	r2, #0
 8000332:	721a      	strb	r2, [r3, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <SPI2_Inits+0x40>)
 8000336:	2200      	movs	r2, #0
 8000338:	725a      	strb	r2, [r3, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <SPI2_Inits+0x40>)
 800033c:	2200      	movs	r2, #0
 800033e:	729a      	strb	r2, [r3, #10]

	SPI_Init(&SPI2handle);
 8000340:	4802      	ldr	r0, [pc, #8]	; (800034c <SPI2_Inits+0x40>)
 8000342:	f000 fcaf 	bl	8000ca4 <SPI_Init>
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	2000007c 	.word	0x2000007c
 8000350:	40003800 	.word	0x40003800

08000354 <Slave_GPIO_InterruptPinInit>:


/*This function configures the gpio pin over which SPI peripheral issues data available interrupt */
void Slave_GPIO_InterruptPinInit(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
	GPIO_Handle_t spiIntPin;
	memset(&spiIntPin,0,sizeof(spiIntPin));
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	220c      	movs	r2, #12
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f001 f9a8 	bl	80016b6 <memset>

	//this is led gpio configuration
	spiIntPin.pGPIOx = GPIOD;
 8000366:	4b0d      	ldr	r3, [pc, #52]	; (800039c <Slave_GPIO_InterruptPinInit+0x48>)
 8000368:	607b      	str	r3, [r7, #4]
	spiIntPin.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800036a:	2306      	movs	r3, #6
 800036c:	723b      	strb	r3, [r7, #8]
	spiIntPin.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800036e:	2304      	movs	r3, #4
 8000370:	727b      	strb	r3, [r7, #9]
	spiIntPin.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000372:	2300      	movs	r3, #0
 8000374:	72bb      	strb	r3, [r7, #10]
	spiIntPin.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000376:	2301      	movs	r3, #1
 8000378:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&spiIntPin);
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f000 f9b9 	bl	80006f4 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15);
 8000382:	210f      	movs	r1, #15
 8000384:	2017      	movs	r0, #23
 8000386:	f000 fbeb 	bl	8000b60 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 800038a:	2101      	movs	r1, #1
 800038c:	2017      	movs	r0, #23
 800038e:	f000 fb63 	bl	8000a58 <GPIO_IRQInterruptConfig>

}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40020c00 	.word	0x40020c00

080003a0 <main>:


int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

	uint8_t dummy = 0xff;
 80003a6:	23ff      	movs	r3, #255	; 0xff
 80003a8:	71fb      	strb	r3, [r7, #7]

	Slave_GPIO_InterruptPinInit();
 80003aa:	f7ff ffd3 	bl	8000354 <Slave_GPIO_InterruptPinInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80003ae:	f7ff ff7f 	bl	80002b0 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80003b2:	f7ff ffab 	bl	800030c <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 80003b6:	2101      	movs	r1, #1
 80003b8:	4824      	ldr	r0, [pc, #144]	; (800044c <main+0xac>)
 80003ba:	f000 fcfc 	bl	8000db6 <SPI_SSOEConfig>

	SPI_IRQInterruptConfig(IRQ_NO_SPI2,ENABLE);
 80003be:	2101      	movs	r1, #1
 80003c0:	2024      	movs	r0, #36	; 0x24
 80003c2:	f000 fd13 	bl	8000dec <SPI_IRQInterruptConfig>

	while(1){

		rcvStop = 0;
 80003c6:	4b22      	ldr	r3, [pc, #136]	; (8000450 <main+0xb0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]

		while(!dataAvailable); //wait till data available interrupt from transmitter device(slave)
 80003cc:	bf00      	nop
 80003ce:	4b21      	ldr	r3, [pc, #132]	; (8000454 <main+0xb4>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0fa      	beq.n	80003ce <main+0x2e>

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,DISABLE);
 80003d8:	2100      	movs	r1, #0
 80003da:	2017      	movs	r0, #23
 80003dc:	f000 fb3c 	bl	8000a58 <GPIO_IRQInterruptConfig>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 80003e0:	2101      	movs	r1, #1
 80003e2:	481a      	ldr	r0, [pc, #104]	; (800044c <main+0xac>)
 80003e4:	f000 fccc 	bl	8000d80 <SPI_PeripheralControl>


		while(!rcvStop)
 80003e8:	e012      	b.n	8000410 <main+0x70>
		{
			/* fetch the data from the SPI peripheral byte by byte in interrupt mode */
			while ( SPI_SendDataIT(&SPI2handle,&dummy,1) == SPI_BUSY_IN_TX);
 80003ea:	bf00      	nop
 80003ec:	1dfb      	adds	r3, r7, #7
 80003ee:	2201      	movs	r2, #1
 80003f0:	4619      	mov	r1, r3
 80003f2:	4819      	ldr	r0, [pc, #100]	; (8000458 <main+0xb8>)
 80003f4:	f000 fd7e 	bl	8000ef4 <SPI_SendDataIT>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b02      	cmp	r3, #2
 80003fc:	d0f6      	beq.n	80003ec <main+0x4c>
			while ( SPI_ReceiveDataIT(&SPI2handle,&ReadByte,1) == SPI_BUSY_IN_RX );
 80003fe:	bf00      	nop
 8000400:	2201      	movs	r2, #1
 8000402:	4916      	ldr	r1, [pc, #88]	; (800045c <main+0xbc>)
 8000404:	4814      	ldr	r0, [pc, #80]	; (8000458 <main+0xb8>)
 8000406:	f000 fd98 	bl	8000f3a <SPI_ReceiveDataIT>
 800040a:	4603      	mov	r3, r0
 800040c:	2b01      	cmp	r3, #1
 800040e:	d0f7      	beq.n	8000400 <main+0x60>
		while(!rcvStop)
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <main+0xb0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0e7      	beq.n	80003ea <main+0x4a>
		}


		// confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 800041a:	bf00      	nop
 800041c:	2180      	movs	r1, #128	; 0x80
 800041e:	480b      	ldr	r0, [pc, #44]	; (800044c <main+0xac>)
 8000420:	f000 fc9b 	bl	8000d5a <SPI_GetFlagStatus>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d1f8      	bne.n	800041c <main+0x7c>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800042a:	2100      	movs	r1, #0
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <main+0xac>)
 800042e:	f000 fca7 	bl	8000d80 <SPI_PeripheralControl>

		printf("Rcvd data = %s\n",RcvBuff);
 8000432:	490b      	ldr	r1, [pc, #44]	; (8000460 <main+0xc0>)
 8000434:	480b      	ldr	r0, [pc, #44]	; (8000464 <main+0xc4>)
 8000436:	f001 f8e9 	bl	800160c <iprintf>

		dataAvailable = 0;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <main+0xb4>)
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]

		GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000440:	2101      	movs	r1, #1
 8000442:	2017      	movs	r0, #23
 8000444:	f000 fb08 	bl	8000a58 <GPIO_IRQInterruptConfig>
	while(1){
 8000448:	e7bd      	b.n	80003c6 <main+0x26>
 800044a:	bf00      	nop
 800044c:	40003800 	.word	0x40003800
 8000450:	20000291 	.word	0x20000291
 8000454:	20000292 	.word	0x20000292
 8000458:	2000007c 	.word	0x2000007c
 800045c:	20000290 	.word	0x20000290
 8000460:	2000009c 	.word	0x2000009c
 8000464:	08002300 	.word	0x08002300

08000468 <SPI2_IRQHandler>:

}

/* Runs when a data byte is received from the peripheral over SPI*/
void SPI2_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0

	SPI_IRQHandling(&SPI2handle);
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <SPI2_IRQHandler+0x10>)
 800046e:	f000 fd87 	bl	8000f80 <SPI_IRQHandling>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	2000007c 	.word	0x2000007c

0800047c <SPI_ApplicationEventCallback>:



void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	460b      	mov	r3, r1
 8000486:	70fb      	strb	r3, [r7, #3]
	static uint32_t i = 0;
	/* In the RX complete event , copy data in to rcv buffer . '\0' indicates end of message(rcvStop = 1) */
	if(AppEv == SPI_EVENT_RX_CMPLT)
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	2b02      	cmp	r3, #2
 800048c:	d11f      	bne.n	80004ce <SPI_ApplicationEventCallback+0x52>
	{
				RcvBuff[i++] = ReadByte;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <SPI_ApplicationEventCallback+0x5c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	4910      	ldr	r1, [pc, #64]	; (80004d8 <SPI_ApplicationEventCallback+0x5c>)
 8000496:	600a      	str	r2, [r1, #0]
 8000498:	4a10      	ldr	r2, [pc, #64]	; (80004dc <SPI_ApplicationEventCallback+0x60>)
 800049a:	7812      	ldrb	r2, [r2, #0]
 800049c:	b2d1      	uxtb	r1, r2
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <SPI_ApplicationEventCallback+0x64>)
 80004a0:	54d1      	strb	r1, [r2, r3]
				if(ReadByte == '\0' || ( i == MAX_LEN)){
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SPI_ApplicationEventCallback+0x60>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d004      	beq.n	80004b6 <SPI_ApplicationEventCallback+0x3a>
 80004ac:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <SPI_ApplicationEventCallback+0x5c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004b4:	d10b      	bne.n	80004ce <SPI_ApplicationEventCallback+0x52>
					rcvStop = 1;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <SPI_ApplicationEventCallback+0x68>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	701a      	strb	r2, [r3, #0]
					RcvBuff[i-1] = '\0';
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <SPI_ApplicationEventCallback+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	3b01      	subs	r3, #1
 80004c2:	4a07      	ldr	r2, [pc, #28]	; (80004e0 <SPI_ApplicationEventCallback+0x64>)
 80004c4:	2100      	movs	r1, #0
 80004c6:	54d1      	strb	r1, [r2, r3]
					i = 0;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <SPI_ApplicationEventCallback+0x5c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
				}
	}

}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000294 	.word	0x20000294
 80004dc:	20000290 	.word	0x20000290
 80004e0:	2000009c 	.word	0x2000009c
 80004e4:	20000291 	.word	0x20000291

080004e8 <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_6);
 80004ec:	2006      	movs	r0, #6
 80004ee:	f000 fb61 	bl	8000bb4 <GPIO_IRQHandling>
	dataAvailable = 1;
 80004f2:	4b02      	ldr	r3, [pc, #8]	; (80004fc <EXTI9_5_IRQHandler+0x14>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20000292 	.word	0x20000292

08000500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000502:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000504:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <LoopForever+0x6>)
  ldr r1, =_edata
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <LoopForever+0xe>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <LoopForever+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052e:	f001 f917 	bl	8001760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff ff35 	bl	80003a0 <main>

08000536 <LoopForever>:

LoopForever:
  b LoopForever
 8000536:	e7fe      	b.n	8000536 <LoopForever>
  ldr   r0, =_estack
 8000538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000540:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000544:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 8000548:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800054c:	20000488 	.word	0x20000488

08000550 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000560:	78fb      	ldrb	r3, [r7, #3]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d157      	bne.n	8000616 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a59      	ldr	r2, [pc, #356]	; (80006d0 <GPIO_PeriClockControl+0x17c>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800056e:	4b59      	ldr	r3, [pc, #356]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a58      	ldr	r2, [pc, #352]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOH_PCLK_DI();
		}
	}


}
 800057a:	e0a3      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a56      	ldr	r2, [pc, #344]	; (80006d8 <GPIO_PeriClockControl+0x184>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d106      	bne.n	8000592 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000584:	4b53      	ldr	r3, [pc, #332]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000588:	4a52      	ldr	r2, [pc, #328]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800058a:	f043 0302 	orr.w	r3, r3, #2
 800058e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000590:	e098      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a51      	ldr	r2, [pc, #324]	; (80006dc <GPIO_PeriClockControl+0x188>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d106      	bne.n	80005a8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800059a:	4b4e      	ldr	r3, [pc, #312]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a4d      	ldr	r2, [pc, #308]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005a6:	e08d      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a4d      	ldr	r2, [pc, #308]	; (80006e0 <GPIO_PeriClockControl+0x18c>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d106      	bne.n	80005be <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80005b0:	4b48      	ldr	r3, [pc, #288]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a47      	ldr	r2, [pc, #284]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005bc:	e082      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a48      	ldr	r2, [pc, #288]	; (80006e4 <GPIO_PeriClockControl+0x190>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d106      	bne.n	80005d4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005c6:	4b43      	ldr	r3, [pc, #268]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a42      	ldr	r2, [pc, #264]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005cc:	f043 0310 	orr.w	r3, r3, #16
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d2:	e077      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <GPIO_PeriClockControl+0x194>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d106      	bne.n	80005ea <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005dc:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a3c      	ldr	r2, [pc, #240]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005e8:	e06c      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4a3f      	ldr	r2, [pc, #252]	; (80006ec <GPIO_PeriClockControl+0x198>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d106      	bne.n	8000600 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005f2:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a37      	ldr	r2, [pc, #220]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80005f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005fe:	e061      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a3b      	ldr	r2, [pc, #236]	; (80006f0 <GPIO_PeriClockControl+0x19c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d15d      	bne.n	80006c4 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a31      	ldr	r2, [pc, #196]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800060e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000614:	e056      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a2d      	ldr	r2, [pc, #180]	; (80006d0 <GPIO_PeriClockControl+0x17c>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d106      	bne.n	800062c <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a2c      	ldr	r2, [pc, #176]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000624:	f023 0301 	bic.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062a:	e04b      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <GPIO_PeriClockControl+0x184>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d106      	bne.n	8000642 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800063a:	f023 0302 	bic.w	r3, r3, #2
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000640:	e040      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a25      	ldr	r2, [pc, #148]	; (80006dc <GPIO_PeriClockControl+0x188>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000650:	f023 0304 	bic.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000656:	e035      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <GPIO_PeriClockControl+0x18c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d106      	bne.n	800066e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000666:	f023 0308 	bic.w	r3, r3, #8
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066c:	e02a      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <GPIO_PeriClockControl+0x190>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800067c:	f023 0310 	bic.w	r3, r3, #16
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000682:	e01f      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <GPIO_PeriClockControl+0x194>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d106      	bne.n	800069a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 8000692:	f023 0320 	bic.w	r3, r3, #32
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000698:	e014      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <GPIO_PeriClockControl+0x198>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d106      	bne.n	80006b0 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a0b      	ldr	r2, [pc, #44]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80006a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006ae:	e009      	b.n	80006c4 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <GPIO_PeriClockControl+0x19c>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d105      	bne.n	80006c4 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <GPIO_PeriClockControl+0x180>)
 80006be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40020000 	.word	0x40020000
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020400 	.word	0x40020400
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40021400 	.word	0x40021400
 80006ec:	40021800 	.word	0x40021800
 80006f0:	40021c00 	.word	0x40021c00

080006f4 <GPIO_Init>:
 *
 * @Note              - none

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; //temp register
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff24 	bl	8000554 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	795b      	ldrb	r3, [r3, #5]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d820      	bhi.n	8000756 <GPIO_Init+0x62>
	{
		//non-interrupt mode

		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	795b      	ldrb	r3, [r3, #5]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << 2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	2103      	movs	r1, #3
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	43db      	mvns	r3, r3
 800073a:	4619      	mov	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp; //setting
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6819      	ldr	r1, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	430a      	orrs	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e0da      	b.n	800090c <GPIO_Init+0x218>
	}else
	{
		// we'll do it later (IRQ mode)
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_FT)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	795b      	ldrb	r3, [r3, #5]
 800075a:	2b04      	cmp	r3, #4
 800075c:	d117      	bne.n	800078e <GPIO_Init+0x9a>
		{
			//1. config the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075e:	4b47      	ldr	r3, [pc, #284]	; (800087c <GPIO_Init+0x188>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a43      	ldr	r2, [pc, #268]	; (800087c <GPIO_Init+0x188>)
 8000770:	430b      	orrs	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000774:	4b41      	ldr	r3, [pc, #260]	; (800087c <GPIO_Init+0x188>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	7912      	ldrb	r2, [r2, #4]
 800077c:	4611      	mov	r1, r2
 800077e:	2201      	movs	r2, #1
 8000780:	408a      	lsls	r2, r1
 8000782:	43d2      	mvns	r2, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a3d      	ldr	r2, [pc, #244]	; (800087c <GPIO_Init+0x188>)
 8000788:	400b      	ands	r3, r1
 800078a:	6093      	str	r3, [r2, #8]
 800078c:	e034      	b.n	80007f8 <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_RT)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	795b      	ldrb	r3, [r3, #5]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d116      	bne.n	80007c4 <GPIO_Init+0xd0>
		{
			//1. config the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000796:	4b39      	ldr	r3, [pc, #228]	; (800087c <GPIO_Init+0x188>)
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	7912      	ldrb	r2, [r2, #4]
 800079e:	4611      	mov	r1, r2
 80007a0:	2201      	movs	r2, #1
 80007a2:	408a      	lsls	r2, r1
 80007a4:	4611      	mov	r1, r2
 80007a6:	4a35      	ldr	r2, [pc, #212]	; (800087c <GPIO_Init+0x188>)
 80007a8:	430b      	orrs	r3, r1
 80007aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ac:	4b33      	ldr	r3, [pc, #204]	; (800087c <GPIO_Init+0x188>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	7912      	ldrb	r2, [r2, #4]
 80007b4:	4611      	mov	r1, r2
 80007b6:	2201      	movs	r2, #1
 80007b8:	408a      	lsls	r2, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	4a2f      	ldr	r2, [pc, #188]	; (800087c <GPIO_Init+0x188>)
 80007be:	430b      	orrs	r3, r1
 80007c0:	60d3      	str	r3, [r2, #12]
 80007c2:	e019      	b.n	80007f8 <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode== GPIO_MODE_IT_RFT)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	2b06      	cmp	r3, #6
 80007ca:	d115      	bne.n	80007f8 <GPIO_Init+0x104>
		{
			//1. config the FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <GPIO_Init+0x188>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7912      	ldrb	r2, [r2, #4]
 80007d4:	4611      	mov	r1, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	408a      	lsls	r2, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	4a27      	ldr	r2, [pc, #156]	; (800087c <GPIO_Init+0x188>)
 80007de:	430b      	orrs	r3, r1
 80007e0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <GPIO_Init+0x188>)
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	7912      	ldrb	r2, [r2, #4]
 80007ea:	4611      	mov	r1, r2
 80007ec:	2201      	movs	r2, #1
 80007ee:	408a      	lsls	r2, r1
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a22      	ldr	r2, [pc, #136]	; (800087c <GPIO_Init+0x188>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	60d3      	str	r3, [r2, #12]
		}
		// 2. Config GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	791b      	ldrb	r3, [r3, #4]
 8000804:	f003 0303 	and.w	r3, r3, #3
 8000808:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <GPIO_Init+0x18c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d045      	beq.n	80008a0 <GPIO_Init+0x1ac>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1a      	ldr	r2, [pc, #104]	; (8000884 <GPIO_Init+0x190>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d02b      	beq.n	8000876 <GPIO_Init+0x182>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a19      	ldr	r2, [pc, #100]	; (8000888 <GPIO_Init+0x194>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d024      	beq.n	8000872 <GPIO_Init+0x17e>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <GPIO_Init+0x198>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d01d      	beq.n	800086e <GPIO_Init+0x17a>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <GPIO_Init+0x19c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d016      	beq.n	800086a <GPIO_Init+0x176>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <GPIO_Init+0x1a0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d00f      	beq.n	8000866 <GPIO_Init+0x172>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <GPIO_Init+0x1a4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d008      	beq.n	8000862 <GPIO_Init+0x16e>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a11      	ldr	r2, [pc, #68]	; (800089c <GPIO_Init+0x1a8>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <GPIO_Init+0x16a>
 800085a:	2307      	movs	r3, #7
 800085c:	e021      	b.n	80008a2 <GPIO_Init+0x1ae>
 800085e:	2300      	movs	r3, #0
 8000860:	e01f      	b.n	80008a2 <GPIO_Init+0x1ae>
 8000862:	2306      	movs	r3, #6
 8000864:	e01d      	b.n	80008a2 <GPIO_Init+0x1ae>
 8000866:	2305      	movs	r3, #5
 8000868:	e01b      	b.n	80008a2 <GPIO_Init+0x1ae>
 800086a:	2304      	movs	r3, #4
 800086c:	e019      	b.n	80008a2 <GPIO_Init+0x1ae>
 800086e:	2303      	movs	r3, #3
 8000870:	e017      	b.n	80008a2 <GPIO_Init+0x1ae>
 8000872:	2302      	movs	r3, #2
 8000874:	e015      	b.n	80008a2 <GPIO_Init+0x1ae>
 8000876:	2301      	movs	r3, #1
 8000878:	e013      	b.n	80008a2 <GPIO_Init+0x1ae>
 800087a:	bf00      	nop
 800087c:	40013c00 	.word	0x40013c00
 8000880:	40020000 	.word	0x40020000
 8000884:	40020400 	.word	0x40020400
 8000888:	40020800 	.word	0x40020800
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40021000 	.word	0x40021000
 8000894:	40021400 	.word	0x40021400
 8000898:	40021800 	.word	0x40021800
 800089c:	40021c00 	.word	0x40021c00
 80008a0:	2300      	movs	r3, #0
 80008a2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008a4:	4b69      	ldr	r3, [pc, #420]	; (8000a4c <GPIO_Init+0x358>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a8:	4a68      	ldr	r2, [pc, #416]	; (8000a4c <GPIO_Init+0x358>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ae:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] &= ~(0xF << (4 * temp2));
 80008b0:	4a67      	ldr	r2, [pc, #412]	; (8000a50 <GPIO_Init+0x35c>)
 80008b2:	7cfb      	ldrb	r3, [r7, #19]
 80008b4:	3302      	adds	r3, #2
 80008b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ba:	7cbb      	ldrb	r3, [r7, #18]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	210f      	movs	r1, #15
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	4961      	ldr	r1, [pc, #388]	; (8000a50 <GPIO_Init+0x35c>)
 80008ca:	7cfb      	ldrb	r3, [r7, #19]
 80008cc:	4002      	ands	r2, r0
 80008ce:	3302      	adds	r3, #2
 80008d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[temp1] |= portcode << ( temp2 * 4);
 80008d4:	4a5e      	ldr	r2, [pc, #376]	; (8000a50 <GPIO_Init+0x35c>)
 80008d6:	7cfb      	ldrb	r3, [r7, #19]
 80008d8:	3302      	adds	r3, #2
 80008da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008de:	7c79      	ldrb	r1, [r7, #17]
 80008e0:	7cbb      	ldrb	r3, [r7, #18]
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	fa01 f303 	lsl.w	r3, r1, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	4959      	ldr	r1, [pc, #356]	; (8000a50 <GPIO_Init+0x35c>)
 80008ec:	7cfb      	ldrb	r3, [r7, #19]
 80008ee:	4302      	orrs	r2, r0
 80008f0:	3302      	adds	r3, #2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// 3. Enable EXTI irq delvery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80008f6:	4b57      	ldr	r3, [pc, #348]	; (8000a54 <GPIO_Init+0x360>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	7912      	ldrb	r2, [r2, #4]
 80008fe:	4611      	mov	r1, r2
 8000900:	2201      	movs	r2, #1
 8000902:	408a      	lsls	r2, r1
 8000904:	4611      	mov	r1, r2
 8000906:	4a53      	ldr	r2, [pc, #332]	; (8000a54 <GPIO_Init+0x360>)
 8000908:	430b      	orrs	r3, r1
 800090a:	6013      	str	r3, [r2, #0]
	}
	temp=0;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
	//2. configure the speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	799b      	ldrb	r3, [r3, #6]
 8000914:	461a      	mov	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	791b      	ldrb	r3, [r3, #4]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << 2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	689a      	ldr	r2, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2103      	movs	r1, #3
 8000930:	fa01 f303 	lsl.w	r3, r1, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	400a      	ands	r2, r1
 800093e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |=temp;//setting
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6899      	ldr	r1, [r3, #8]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	430a      	orrs	r2, r1
 800094e:	609a      	str	r2, [r3, #8]
	temp=0;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
	//3. configure the pupd settings
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	79db      	ldrb	r3, [r3, #7]
 8000958:	461a      	mov	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	791b      	ldrb	r3, [r3, #4]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << 2 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	791b      	ldrb	r3, [r3, #4]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	2103      	movs	r1, #3
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	4619      	mov	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	400a      	ands	r2, r1
 8000982:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;//setting
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68d9      	ldr	r1, [r3, #12]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	430a      	orrs	r2, r1
 8000992:	60da      	str	r2, [r3, #12]
	temp=0;
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]
	//4. configure the optype
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a1b      	ldrb	r3, [r3, #8]
 800099c:	461a      	mov	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	791b      	ldrb	r3, [r3, #4]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	791b      	ldrb	r3, [r3, #4]
 80009b2:	4619      	mov	r1, r3
 80009b4:	2301      	movs	r3, #1
 80009b6:	408b      	lsls	r3, r1
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4619      	mov	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	400a      	ands	r2, r1
 80009c2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;//setting
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	6859      	ldr	r1, [r3, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	697a      	ldr	r2, [r7, #20]
 80009d0:	430a      	orrs	r2, r1
 80009d2:	605a      	str	r2, [r3, #4]
	temp=0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
	//5. configure the alt functionality
	if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode) == GPIO_MODE_ALTFN)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	795b      	ldrb	r3, [r3, #5]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d131      	bne.n	8000a44 <GPIO_Init+0x350>
	{
		// configure alternate fun register
		uint8_t temp1, temp2;
		temp1= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)/8;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	743b      	strb	r3, [r7, #16]
		temp2= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)%8;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	f003 0307 	and.w	r3, r3, #7
 80009f0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4* temp2));//clearing
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	7c3a      	ldrb	r2, [r7, #16]
 80009f8:	3208      	adds	r2, #8
 80009fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	7c3a      	ldrb	r2, [r7, #16]
 8000a12:	4001      	ands	r1, r0
 8000a14:	3208      	adds	r2, #8
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4* temp2));//setting
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7c3a      	ldrb	r2, [r7, #16]
 8000a20:	3208      	adds	r2, #8
 8000a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7a5b      	ldrb	r3, [r3, #9]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7c3a      	ldrb	r2, [r7, #16]
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	3208      	adds	r2, #8
 8000a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000a44:	bf00      	nop
 8000a46:	3718      	adds	r7, #24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40013800 	.word	0x40013800
 8000a54:	40013c00 	.word	0x40013c00

08000a58 <GPIO_IRQInterruptConfig>:
 *
 * @Note              - IRQGrouping can also be considered, which we have not considered in this project

 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	460a      	mov	r2, r1
 8000a62:	71fb      	strb	r3, [r7, #7]
 8000a64:	4613      	mov	r3, r2
 8000a66:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d133      	bne.n	8000ad6 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b1f      	cmp	r3, #31
 8000a72:	d80a      	bhi.n	8000a8a <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <GPIO_IRQInterruptConfig+0xf0>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a80:	4611      	mov	r1, r2
 8000a82:	4a31      	ldr	r2, [pc, #196]	; (8000b48 <GPIO_IRQInterruptConfig+0xf0>)
 8000a84:	430b      	orrs	r3, r1
 8000a86:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000a88:	e059      	b.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b1f      	cmp	r3, #31
 8000a8e:	d90f      	bls.n	8000ab0 <GPIO_IRQInterruptConfig+0x58>
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	2b3f      	cmp	r3, #63	; 0x3f
 8000a94:	d80c      	bhi.n	8000ab0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <GPIO_IRQInterruptConfig+0xf4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	f002 021f 	and.w	r2, r2, #31
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <GPIO_IRQInterruptConfig+0xf4>)
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e046      	b.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab4:	d943      	bls.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b5f      	cmp	r3, #95	; 0x5f
 8000aba:	d840      	bhi.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <GPIO_IRQInterruptConfig+0xf8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	79fa      	ldrb	r2, [r7, #7]
 8000ac2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8000acc:	4611      	mov	r1, r2
 8000ace:	4a20      	ldr	r2, [pc, #128]	; (8000b50 <GPIO_IRQInterruptConfig+0xf8>)
 8000ad0:	430b      	orrs	r3, r1
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	e033      	b.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b1f      	cmp	r3, #31
 8000ada:	d80a      	bhi.n	8000af2 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <GPIO_IRQInterruptConfig+0xfc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	79fa      	ldrb	r2, [r7, #7]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	4611      	mov	r1, r2
 8000aea:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <GPIO_IRQInterruptConfig+0xfc>)
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	e025      	b.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b1f      	cmp	r3, #31
 8000af6:	d90f      	bls.n	8000b18 <GPIO_IRQInterruptConfig+0xc0>
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	2b3f      	cmp	r3, #63	; 0x3f
 8000afc:	d80c      	bhi.n	8000b18 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <GPIO_IRQInterruptConfig+0x100>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	79fa      	ldrb	r2, [r7, #7]
 8000b04:	f002 021f 	and.w	r2, r2, #31
 8000b08:	2101      	movs	r1, #1
 8000b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <GPIO_IRQInterruptConfig+0x100>)
 8000b12:	430b      	orrs	r3, r1
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e012      	b.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b1c:	d90f      	bls.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b5f      	cmp	r3, #95	; 0x5f
 8000b22:	d80c      	bhi.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <GPIO_IRQInterruptConfig+0x104>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	79fa      	ldrb	r2, [r7, #7]
 8000b2a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	4611      	mov	r1, r2
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <GPIO_IRQInterruptConfig+0x104>)
 8000b38:	430b      	orrs	r3, r1
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	e7ff      	b.n	8000b3e <GPIO_IRQInterruptConfig+0xe6>
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000e104 	.word	0xe000e104
 8000b50:	e000e108 	.word	0xe000e108
 8000b54:	e000e180 	.word	0xe000e180
 8000b58:	e000e184 	.word	0xe000e184
 8000b5c:	e000e188 	.word	0xe000e188

08000b60 <GPIO_IRQPriorityConfig>:
 *
 * @Note              -

 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	089b      	lsrs	r3, r3, #2
 8000b70:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %4 ;
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 0303 	and.w	r3, r3, #3
 8000b78:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	3304      	adds	r3, #4
 8000b82:	737b      	strb	r3, [r7, #13]

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b8c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	7b7b      	ldrb	r3, [r7, #13]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	409a      	lsls	r2, r3
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ba0:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]

}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <GPIO_IRQHandling>:
 *
 * @Note              - none

 */
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if(EXTI->PR & ( 1 << PinNumber))
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <GPIO_IRQHandling+0x3c>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	79fa      	ldrb	r2, [r7, #7]
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bca:	4013      	ands	r3, r2
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d009      	beq.n	8000be4 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <GPIO_IRQHandling+0x3c>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	79fa      	ldrb	r2, [r7, #7]
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <GPIO_IRQHandling+0x3c>)
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6153      	str	r3, [r2, #20]
	}
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40013c00 	.word	0x40013c00

08000bf4 <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d120      	bne.n	8000c48 <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a22      	ldr	r2, [pc, #136]	; (8000c94 <SPI_PeriClockControl+0xa0>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d106      	bne.n	8000c1c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
		}else if (pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
	}
}
 8000c1a:	e035      	b.n	8000c88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <SPI_PeriClockControl+0xa8>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d106      	bne.n	8000c32 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c30:	e02a      	b.n	8000c88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <SPI_PeriClockControl+0xac>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d126      	bne.n	8000c88 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a16      	ldr	r2, [pc, #88]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c46:	e01f      	b.n	8000c88 <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <SPI_PeriClockControl+0xa0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d106      	bne.n	8000c5e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c54:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c5a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c5c:	e014      	b.n	8000c88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a0e      	ldr	r2, [pc, #56]	; (8000c9c <SPI_PeriClockControl+0xa8>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d106      	bne.n	8000c74 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c72:	e009      	b.n	8000c88 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SPI_PeriClockControl+0xac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d105      	bne.n	8000c88 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SPI_PeriClockControl+0xa4>)
 8000c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c86:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40003800 	.word	0x40003800
 8000ca0:	40003c00 	.word	0x40003c00

08000ca4 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff9e 	bl	8000bf4 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	791b      	ldrb	r3, [r3, #4]
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	795b      	ldrb	r3, [r3, #5]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d104      	bne.n	8000cdc <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	e014      	b.n	8000d06 <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	795b      	ldrb	r3, [r3, #5]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d104      	bne.n	8000cee <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e00b      	b.n	8000d06 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	795b      	ldrb	r3, [r3, #5]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d107      	bne.n	8000d06 <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cfc:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d04:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	799b      	ldrb	r3, [r3, #6]
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	79db      	ldrb	r3, [r3, #7]
 8000d18:	02db      	lsls	r3, r3, #11
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	7a1b      	ldrb	r3, [r3, #8]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	461a      	mov	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7a5b      	ldrb	r3, [r3, #9]
 8000d34:	461a      	mov	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	7a9b      	ldrb	r3, [r3, #10]
 8000d40:	025b      	lsls	r3, r3, #9
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	601a      	str	r2, [r3, #0]

}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689a      	ldr	r2, [r3, #8]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e000      	b.n	8000d76 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d106      	bne.n	8000da0 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000d9e:	e005      	b.n	8000dac <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d106      	bne.n	8000dd6 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f043 0204 	orr.w	r2, r3, #4
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000dd4:	e005      	b.n	8000de2 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f023 0204 	bic.w	r2, r3, #4
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	605a      	str	r2, [r3, #4]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SPI_IRQInterruptConfig>:
 *
 * @Note              -

 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	460a      	mov	r2, r1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d133      	bne.n	8000e6a <SPI_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b1f      	cmp	r3, #31
 8000e06:	d80a      	bhi.n	8000e1e <SPI_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000e08:	4b34      	ldr	r3, [pc, #208]	; (8000edc <SPI_IRQInterruptConfig+0xf0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	4611      	mov	r1, r2
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <SPI_IRQInterruptConfig+0xf0>)
 8000e18:	430b      	orrs	r3, r1
 8000e1a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000e1c:	e059      	b.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2b1f      	cmp	r3, #31
 8000e22:	d90f      	bls.n	8000e44 <SPI_IRQInterruptConfig+0x58>
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	2b3f      	cmp	r3, #63	; 0x3f
 8000e28:	d80c      	bhi.n	8000e44 <SPI_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <SPI_IRQInterruptConfig+0xf4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	f002 021f 	and.w	r2, r2, #31
 8000e34:	2101      	movs	r1, #1
 8000e36:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <SPI_IRQInterruptConfig+0xf4>)
 8000e3e:	430b      	orrs	r3, r1
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e046      	b.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b3f      	cmp	r3, #63	; 0x3f
 8000e48:	d943      	bls.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b5f      	cmp	r3, #95	; 0x5f
 8000e4e:	d840      	bhi.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000e50:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <SPI_IRQInterruptConfig+0xf8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	4611      	mov	r1, r2
 8000e62:	4a20      	ldr	r2, [pc, #128]	; (8000ee4 <SPI_IRQInterruptConfig+0xf8>)
 8000e64:	430b      	orrs	r3, r1
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	e033      	b.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b1f      	cmp	r3, #31
 8000e6e:	d80a      	bhi.n	8000e86 <SPI_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <SPI_IRQInterruptConfig+0xfc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	79fa      	ldrb	r2, [r7, #7]
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <SPI_IRQInterruptConfig+0xfc>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	e025      	b.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b1f      	cmp	r3, #31
 8000e8a:	d90f      	bls.n	8000eac <SPI_IRQInterruptConfig+0xc0>
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e90:	d80c      	bhi.n	8000eac <SPI_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <SPI_IRQInterruptConfig+0x100>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	f002 021f 	and.w	r2, r2, #31
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4a11      	ldr	r2, [pc, #68]	; (8000eec <SPI_IRQInterruptConfig+0x100>)
 8000ea6:	430b      	orrs	r3, r1
 8000ea8:	6013      	str	r3, [r2, #0]
 8000eaa:	e012      	b.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d90f      	bls.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b5f      	cmp	r3, #95	; 0x5f
 8000eb6:	d80c      	bhi.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <SPI_IRQInterruptConfig+0x104>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	79fa      	ldrb	r2, [r7, #7]
 8000ebe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <SPI_IRQInterruptConfig+0x104>)
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	e7ff      	b.n	8000ed2 <SPI_IRQInterruptConfig+0xe6>
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000e104 	.word	0xe000e104
 8000ee4:	e000e10c 	.word	0xe000e10c
 8000ee8:	e000e180 	.word	0xe000e180
 8000eec:	e000e184 	.word	0xe000e184
 8000ef0:	e000e18c 	.word	0xe000e18c

08000ef4 <SPI_SendDataIT>:

}


uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->TxState;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	7f1b      	ldrb	r3, [r3, #28]
 8000f04:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_TX)
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d010      	beq.n	8000f2e <SPI_SendDataIT+0x3a>
	{
		//1 . Save the Tx buffer address and Len information in some global variables
		pSPIHandle->pTxBuffer = pTxBuffer;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen = Len;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	615a      	str	r2, [r3, #20]
		//2.  Mark the SPI state as busy in transmission so that
		//    no other code can take over same SPI peripheral until transmission is over
		pSPIHandle->TxState = SPI_BUSY_IN_TX;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	771a      	strb	r2, [r3, #28]

		//3. Enable the TXEIE control bit to get interrupt whenever TXE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_TXEIE );
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f2c:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	371c      	adds	r7, #28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <SPI_ReceiveDataIT>:


uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b087      	sub	sp, #28
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	607a      	str	r2, [r7, #4]
	uint8_t state = pSPIHandle->RxState;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	7f5b      	ldrb	r3, [r3, #29]
 8000f4a:	75fb      	strb	r3, [r7, #23]

	if(state != SPI_BUSY_IN_RX)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d010      	beq.n	8000f74 <SPI_ReceiveDataIT+0x3a>
	{
		//1 . Save the Rx buffer address and Len information in some global variables
		pSPIHandle->pRxBuffer = pRxBuffer;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	611a      	str	r2, [r3, #16]
		pSPIHandle->RxLen = Len;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	619a      	str	r2, [r3, #24]
		//2.  Mark the SPI state as busy in reception so that
		//    no other code can take over same SPI peripheral until reception is over
		pSPIHandle->RxState = SPI_BUSY_IN_RX;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2201      	movs	r2, #1
 8000f62:	775a      	strb	r2, [r3, #29]

		//3. Enable the RXNEIE control bit to get interrupt whenever RXNEIE flag is set in SR
		pSPIHandle->pSPIx->CR2 |= ( 1 << SPI_CR2_RXNEIE );
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f72:	605a      	str	r2, [r3, #4]

	}


	return state;
 8000f74:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f76:	4618      	mov	r0, r3
 8000f78:	371c      	adds	r7, #28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SPI_IRQHandling>:




void SPI_IRQHandling(SPI_Handle_t *pHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	uint8_t temp1 , temp2;
	//first lets check for TXE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_TXE);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_TXEIE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fa2:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <SPI_IRQHandling+0x36>
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <SPI_IRQHandling+0x36>
	{
		//handle TXE
		spi_txe_interrupt_handle(pHandle);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f832 	bl	800101a <spi_txe_interrupt_handle>
	}

	// check for RXNE
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_RXNE);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_RXNEIE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd0:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <SPI_IRQHandling+0x64>
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <SPI_IRQHandling+0x64>
	{
		//handle RXNE
		spi_rxne_interrupt_handle(pHandle);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f85b 	bl	800109a <spi_rxne_interrupt_handle>
	}

	// check for ovr flag
	temp1 = pHandle->pSPIx->SR & ( 1 << SPI_SR_OVR);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff0:	73fb      	strb	r3, [r7, #15]
	temp2 = pHandle->pSPIx->CR2 & ( 1 << SPI_CR2_ERRIE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	73bb      	strb	r3, [r7, #14]

	if( temp1 && temp2)
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <SPI_IRQHandling+0x92>
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <SPI_IRQHandling+0x92>
	{
		//handle ovr error
		spi_ovr_err_interrupt_handle(pHandle);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f886 	bl	800111e <spi_ovr_err_interrupt_handle>
	}


}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <spi_txe_interrupt_handle>:

//some helper function implementations

static void  spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	// check the DFF bit in CR1
	if( (pSPIHandle->pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800102c:	2b00      	cmp	r3, #0
 800102e:	d015      	beq.n	800105c <spi_txe_interrupt_handle+0x42>
	{
		//16 bit DFF
		//1. load the data in to the DR
		pSPIHandle->pSPIx->DR =   *((uint16_t*)pSPIHandle->pTxBuffer);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	881a      	ldrh	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	615a      	str	r2, [r3, #20]
		pSPIHandle->TxLen--;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
		(uint16_t*)pSPIHandle->pTxBuffer++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	e00f      	b.n	800107c <spi_txe_interrupt_handle+0x62>
	}else
	{
		//8 bit DFF
		pSPIHandle->pSPIx->DR =   *pSPIHandle->pTxBuffer;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	60da      	str	r2, [r3, #12]
		pSPIHandle->TxLen--;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	1e5a      	subs	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	615a      	str	r2, [r3, #20]
		pSPIHandle->pTxBuffer++;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
	}

	if(! pSPIHandle->TxLen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d106      	bne.n	8001092 <spi_txe_interrupt_handle+0x78>
	{
		//TxLen is zero , so close the spi transmission and inform the application that
		//TX is over.

		//this prevents interrupts from setting up of TXE flag
		SPI_CloseTransmisson(pSPIHandle);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f862 	bl	800114e <SPI_CloseTransmisson>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_TX_CMPLT);
 800108a:	2101      	movs	r1, #1
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff f9f5 	bl	800047c <SPI_ApplicationEventCallback>
	}

}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <spi_rxne_interrupt_handle>:


static void  spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	//do rxing as per the dff
	if(pSPIHandle->pSPIx->CR1 & ( 1 << 11))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d016      	beq.n	80010de <spi_rxne_interrupt_handle+0x44>
	{
		//16 bit
		*((uint16_t*)pSPIHandle->pRxBuffer) = (uint16_t) pSPIHandle->pSPIx->DR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	b292      	uxth	r2, r2
 80010bc:	801a      	strh	r2, [r3, #0]
		pSPIHandle->RxLen -= 2;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	1e9a      	subs	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	1c5a      	adds	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	611a      	str	r2, [r3, #16]
		pSPIHandle->pRxBuffer++;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	e010      	b.n	8001100 <spi_rxne_interrupt_handle+0x66>

	}else
	{
		//8 bit
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
		pSPIHandle->RxLen--;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	1e5a      	subs	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
		pSPIHandle->pRxBuffer++;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	611a      	str	r2, [r3, #16]
	}

	if(! pSPIHandle->RxLen)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <spi_rxne_interrupt_handle+0x7c>
	{
		//reception is complete
		SPI_CloseReception(pSPIHandle);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f83a 	bl	8001182 <SPI_CloseReception>
		SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_RX_CMPLT);
 800110e:	2102      	movs	r1, #2
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff f9b3 	bl	800047c <SPI_ApplicationEventCallback>
	}

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <spi_ovr_err_interrupt_handle>:


static void  spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]

	uint8_t temp;
	//1. clear the ovr flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	7f1b      	ldrb	r3, [r3, #28]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d007      	beq.n	800113e <spi_ovr_err_interrupt_handle+0x20>
	{
		temp = pSPIHandle->pSPIx->DR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	73fb      	strb	r3, [r7, #15]
		temp = pSPIHandle->pSPIx->SR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	73fb      	strb	r3, [r7, #15]
	}
	(void)temp;
	//2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle,SPI_EVENT_OVR_ERR);
 800113e:	2103      	movs	r1, #3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f99b 	bl	800047c <SPI_ApplicationEventCallback>

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <SPI_CloseTransmisson>:




void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_TXEIE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001164:	605a      	str	r2, [r3, #4]
	pSPIHandle->pTxBuffer = NULL;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	60da      	str	r2, [r3, #12]
	pSPIHandle->TxLen = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
	pSPIHandle->TxState = SPI_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	771a      	strb	r2, [r3, #28]

}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <SPI_CloseReception>:

void SPI_CloseReception(SPI_Handle_t *pSPIHandle)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	pSPIHandle->pSPIx->CR2 &= ~( 1 << SPI_CR2_RXNEIE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001198:	605a      	str	r2, [r3, #4]
	pSPIHandle->pRxBuffer = NULL;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
	pSPIHandle->RxLen = 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
	pSPIHandle->RxState = SPI_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	775a      	strb	r2, [r3, #29]

}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
	...

080011b8 <findslot>:
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <findslot+0x2c>)
 80011ba:	b510      	push	{r4, lr}
 80011bc:	4604      	mov	r4, r0
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	b118      	cbz	r0, 80011ca <findslot+0x12>
 80011c2:	6a03      	ldr	r3, [r0, #32]
 80011c4:	b90b      	cbnz	r3, 80011ca <findslot+0x12>
 80011c6:	f000 f9eb 	bl	80015a0 <__sinit>
 80011ca:	2c13      	cmp	r4, #19
 80011cc:	d807      	bhi.n	80011de <findslot+0x26>
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <findslot+0x30>)
 80011d0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80011d4:	3201      	adds	r2, #1
 80011d6:	d002      	beq.n	80011de <findslot+0x26>
 80011d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80011dc:	bd10      	pop	{r4, pc}
 80011de:	2000      	movs	r0, #0
 80011e0:	e7fc      	b.n	80011dc <findslot+0x24>
 80011e2:	bf00      	nop
 80011e4:	2000005c 	.word	0x2000005c
 80011e8:	2000029c 	.word	0x2000029c

080011ec <error>:
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	4604      	mov	r4, r0
 80011f0:	f000 fab0 	bl	8001754 <__errno>
 80011f4:	2613      	movs	r6, #19
 80011f6:	4605      	mov	r5, r0
 80011f8:	2700      	movs	r7, #0
 80011fa:	4630      	mov	r0, r6
 80011fc:	4639      	mov	r1, r7
 80011fe:	beab      	bkpt	0x00ab
 8001200:	4606      	mov	r6, r0
 8001202:	602e      	str	r6, [r5, #0]
 8001204:	4620      	mov	r0, r4
 8001206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001208 <checkerror>:
 8001208:	1c43      	adds	r3, r0, #1
 800120a:	d101      	bne.n	8001210 <checkerror+0x8>
 800120c:	f7ff bfee 	b.w	80011ec <error>
 8001210:	4770      	bx	lr

08001212 <_swiread>:
 8001212:	b530      	push	{r4, r5, lr}
 8001214:	b085      	sub	sp, #20
 8001216:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800121a:	9203      	str	r2, [sp, #12]
 800121c:	2406      	movs	r4, #6
 800121e:	ad01      	add	r5, sp, #4
 8001220:	4620      	mov	r0, r4
 8001222:	4629      	mov	r1, r5
 8001224:	beab      	bkpt	0x00ab
 8001226:	4604      	mov	r4, r0
 8001228:	4620      	mov	r0, r4
 800122a:	f7ff ffed 	bl	8001208 <checkerror>
 800122e:	b005      	add	sp, #20
 8001230:	bd30      	pop	{r4, r5, pc}

08001232 <_read>:
 8001232:	b570      	push	{r4, r5, r6, lr}
 8001234:	460e      	mov	r6, r1
 8001236:	4615      	mov	r5, r2
 8001238:	f7ff ffbe 	bl	80011b8 <findslot>
 800123c:	4604      	mov	r4, r0
 800123e:	b930      	cbnz	r0, 800124e <_read+0x1c>
 8001240:	f000 fa88 	bl	8001754 <__errno>
 8001244:	2309      	movs	r3, #9
 8001246:	6003      	str	r3, [r0, #0]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	6800      	ldr	r0, [r0, #0]
 8001250:	462a      	mov	r2, r5
 8001252:	4631      	mov	r1, r6
 8001254:	f7ff ffdd 	bl	8001212 <_swiread>
 8001258:	1c43      	adds	r3, r0, #1
 800125a:	bf1f      	itttt	ne
 800125c:	6863      	ldrne	r3, [r4, #4]
 800125e:	1a28      	subne	r0, r5, r0
 8001260:	181b      	addne	r3, r3, r0
 8001262:	6063      	strne	r3, [r4, #4]
 8001264:	e7f2      	b.n	800124c <_read+0x1a>

08001266 <_swilseek>:
 8001266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001268:	460c      	mov	r4, r1
 800126a:	4616      	mov	r6, r2
 800126c:	f7ff ffa4 	bl	80011b8 <findslot>
 8001270:	4605      	mov	r5, r0
 8001272:	b940      	cbnz	r0, 8001286 <_swilseek+0x20>
 8001274:	f000 fa6e 	bl	8001754 <__errno>
 8001278:	2309      	movs	r3, #9
 800127a:	6003      	str	r3, [r0, #0]
 800127c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001280:	4620      	mov	r0, r4
 8001282:	b003      	add	sp, #12
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	2e02      	cmp	r6, #2
 8001288:	d903      	bls.n	8001292 <_swilseek+0x2c>
 800128a:	f000 fa63 	bl	8001754 <__errno>
 800128e:	2316      	movs	r3, #22
 8001290:	e7f3      	b.n	800127a <_swilseek+0x14>
 8001292:	2e01      	cmp	r6, #1
 8001294:	d112      	bne.n	80012bc <_swilseek+0x56>
 8001296:	6843      	ldr	r3, [r0, #4]
 8001298:	18e4      	adds	r4, r4, r3
 800129a:	d4f6      	bmi.n	800128a <_swilseek+0x24>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	260a      	movs	r6, #10
 80012a0:	e9cd 3400 	strd	r3, r4, [sp]
 80012a4:	466f      	mov	r7, sp
 80012a6:	4630      	mov	r0, r6
 80012a8:	4639      	mov	r1, r7
 80012aa:	beab      	bkpt	0x00ab
 80012ac:	4606      	mov	r6, r0
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff ffaa 	bl	8001208 <checkerror>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	dbe1      	blt.n	800127c <_swilseek+0x16>
 80012b8:	606c      	str	r4, [r5, #4]
 80012ba:	e7e1      	b.n	8001280 <_swilseek+0x1a>
 80012bc:	2e02      	cmp	r6, #2
 80012be:	6803      	ldr	r3, [r0, #0]
 80012c0:	d1ec      	bne.n	800129c <_swilseek+0x36>
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	260c      	movs	r6, #12
 80012c6:	466f      	mov	r7, sp
 80012c8:	4630      	mov	r0, r6
 80012ca:	4639      	mov	r1, r7
 80012cc:	beab      	bkpt	0x00ab
 80012ce:	4606      	mov	r6, r0
 80012d0:	4630      	mov	r0, r6
 80012d2:	f7ff ff99 	bl	8001208 <checkerror>
 80012d6:	1c43      	adds	r3, r0, #1
 80012d8:	d0d0      	beq.n	800127c <_swilseek+0x16>
 80012da:	4404      	add	r4, r0
 80012dc:	e7de      	b.n	800129c <_swilseek+0x36>

080012de <_lseek>:
 80012de:	f7ff bfc2 	b.w	8001266 <_swilseek>

080012e2 <_swiwrite>:
 80012e2:	b530      	push	{r4, r5, lr}
 80012e4:	b085      	sub	sp, #20
 80012e6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80012ea:	9203      	str	r2, [sp, #12]
 80012ec:	2405      	movs	r4, #5
 80012ee:	ad01      	add	r5, sp, #4
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	beab      	bkpt	0x00ab
 80012f6:	4604      	mov	r4, r0
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff ff85 	bl	8001208 <checkerror>
 80012fe:	b005      	add	sp, #20
 8001300:	bd30      	pop	{r4, r5, pc}

08001302 <_write>:
 8001302:	b570      	push	{r4, r5, r6, lr}
 8001304:	460e      	mov	r6, r1
 8001306:	4615      	mov	r5, r2
 8001308:	f7ff ff56 	bl	80011b8 <findslot>
 800130c:	4604      	mov	r4, r0
 800130e:	b930      	cbnz	r0, 800131e <_write+0x1c>
 8001310:	f000 fa20 	bl	8001754 <__errno>
 8001314:	2309      	movs	r3, #9
 8001316:	6003      	str	r3, [r0, #0]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800131c:	bd70      	pop	{r4, r5, r6, pc}
 800131e:	6800      	ldr	r0, [r0, #0]
 8001320:	462a      	mov	r2, r5
 8001322:	4631      	mov	r1, r6
 8001324:	f7ff ffdd 	bl	80012e2 <_swiwrite>
 8001328:	1e03      	subs	r3, r0, #0
 800132a:	dbf5      	blt.n	8001318 <_write+0x16>
 800132c:	6862      	ldr	r2, [r4, #4]
 800132e:	1ae8      	subs	r0, r5, r3
 8001330:	4402      	add	r2, r0
 8001332:	42ab      	cmp	r3, r5
 8001334:	6062      	str	r2, [r4, #4]
 8001336:	d1f1      	bne.n	800131c <_write+0x1a>
 8001338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff bf55 	b.w	80011ec <error>

08001342 <_swiclose>:
 8001342:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001344:	2402      	movs	r4, #2
 8001346:	9001      	str	r0, [sp, #4]
 8001348:	ad01      	add	r5, sp, #4
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	beab      	bkpt	0x00ab
 8001350:	4604      	mov	r4, r0
 8001352:	4620      	mov	r0, r4
 8001354:	f7ff ff58 	bl	8001208 <checkerror>
 8001358:	b003      	add	sp, #12
 800135a:	bd30      	pop	{r4, r5, pc}

0800135c <_close>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4605      	mov	r5, r0
 8001360:	f7ff ff2a 	bl	80011b8 <findslot>
 8001364:	4604      	mov	r4, r0
 8001366:	b930      	cbnz	r0, 8001376 <_close+0x1a>
 8001368:	f000 f9f4 	bl	8001754 <__errno>
 800136c:	2309      	movs	r3, #9
 800136e:	6003      	str	r3, [r0, #0]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	bd38      	pop	{r3, r4, r5, pc}
 8001376:	3d01      	subs	r5, #1
 8001378:	2d01      	cmp	r5, #1
 800137a:	d809      	bhi.n	8001390 <_close+0x34>
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <_close+0x48>)
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	429a      	cmp	r2, r3
 8001384:	d104      	bne.n	8001390 <_close+0x34>
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138a:	6003      	str	r3, [r0, #0]
 800138c:	2000      	movs	r0, #0
 800138e:	e7f1      	b.n	8001374 <_close+0x18>
 8001390:	6820      	ldr	r0, [r4, #0]
 8001392:	f7ff ffd6 	bl	8001342 <_swiclose>
 8001396:	2800      	cmp	r0, #0
 8001398:	d1ec      	bne.n	8001374 <_close+0x18>
 800139a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139e:	6023      	str	r3, [r4, #0]
 80013a0:	e7e8      	b.n	8001374 <_close+0x18>
 80013a2:	bf00      	nop
 80013a4:	2000029c 	.word	0x2000029c

080013a8 <_sbrk>:
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <_sbrk+0x38>)
 80013aa:	6811      	ldr	r1, [r2, #0]
 80013ac:	b510      	push	{r4, lr}
 80013ae:	4603      	mov	r3, r0
 80013b0:	b909      	cbnz	r1, 80013b6 <_sbrk+0xe>
 80013b2:	490c      	ldr	r1, [pc, #48]	; (80013e4 <_sbrk+0x3c>)
 80013b4:	6011      	str	r1, [r2, #0]
 80013b6:	6810      	ldr	r0, [r2, #0]
 80013b8:	4669      	mov	r1, sp
 80013ba:	4403      	add	r3, r0
 80013bc:	428b      	cmp	r3, r1
 80013be:	d806      	bhi.n	80013ce <_sbrk+0x26>
 80013c0:	4909      	ldr	r1, [pc, #36]	; (80013e8 <_sbrk+0x40>)
 80013c2:	4c0a      	ldr	r4, [pc, #40]	; (80013ec <_sbrk+0x44>)
 80013c4:	6809      	ldr	r1, [r1, #0]
 80013c6:	42a1      	cmp	r1, r4
 80013c8:	d008      	beq.n	80013dc <_sbrk+0x34>
 80013ca:	428b      	cmp	r3, r1
 80013cc:	d906      	bls.n	80013dc <_sbrk+0x34>
 80013ce:	f000 f9c1 	bl	8001754 <__errno>
 80013d2:	230c      	movs	r3, #12
 80013d4:	6003      	str	r3, [r0, #0]
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013da:	bd10      	pop	{r4, pc}
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e7fc      	b.n	80013da <_sbrk+0x32>
 80013e0:	20000298 	.word	0x20000298
 80013e4:	20000488 	.word	0x20000488
 80013e8:	20000000 	.word	0x20000000
 80013ec:	cafedead 	.word	0xcafedead

080013f0 <_swistat>:
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	460c      	mov	r4, r1
 80013f4:	f7ff fee0 	bl	80011b8 <findslot>
 80013f8:	4605      	mov	r5, r0
 80013fa:	b930      	cbnz	r0, 800140a <_swistat+0x1a>
 80013fc:	f000 f9aa 	bl	8001754 <__errno>
 8001400:	2309      	movs	r3, #9
 8001402:	6003      	str	r3, [r0, #0]
 8001404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001408:	bd70      	pop	{r4, r5, r6, pc}
 800140a:	6863      	ldr	r3, [r4, #4]
 800140c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001410:	6063      	str	r3, [r4, #4]
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	64a3      	str	r3, [r4, #72]	; 0x48
 8001418:	260c      	movs	r6, #12
 800141a:	4630      	mov	r0, r6
 800141c:	4629      	mov	r1, r5
 800141e:	beab      	bkpt	0x00ab
 8001420:	4605      	mov	r5, r0
 8001422:	4628      	mov	r0, r5
 8001424:	f7ff fef0 	bl	8001208 <checkerror>
 8001428:	1c43      	adds	r3, r0, #1
 800142a:	bf1c      	itt	ne
 800142c:	6120      	strne	r0, [r4, #16]
 800142e:	2000      	movne	r0, #0
 8001430:	e7ea      	b.n	8001408 <_swistat+0x18>

08001432 <_fstat>:
 8001432:	460b      	mov	r3, r1
 8001434:	b510      	push	{r4, lr}
 8001436:	2100      	movs	r1, #0
 8001438:	4604      	mov	r4, r0
 800143a:	2258      	movs	r2, #88	; 0x58
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f93a 	bl	80016b6 <memset>
 8001442:	4601      	mov	r1, r0
 8001444:	4620      	mov	r0, r4
 8001446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800144a:	f7ff bfd1 	b.w	80013f0 <_swistat>

0800144e <_isatty>:
 800144e:	b570      	push	{r4, r5, r6, lr}
 8001450:	f7ff feb2 	bl	80011b8 <findslot>
 8001454:	2509      	movs	r5, #9
 8001456:	4604      	mov	r4, r0
 8001458:	b920      	cbnz	r0, 8001464 <_isatty+0x16>
 800145a:	f000 f97b 	bl	8001754 <__errno>
 800145e:	6005      	str	r5, [r0, #0]
 8001460:	4620      	mov	r0, r4
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	4628      	mov	r0, r5
 8001466:	4621      	mov	r1, r4
 8001468:	beab      	bkpt	0x00ab
 800146a:	4604      	mov	r4, r0
 800146c:	2c01      	cmp	r4, #1
 800146e:	d0f7      	beq.n	8001460 <_isatty+0x12>
 8001470:	f000 f970 	bl	8001754 <__errno>
 8001474:	2400      	movs	r4, #0
 8001476:	4605      	mov	r5, r0
 8001478:	2613      	movs	r6, #19
 800147a:	4630      	mov	r0, r6
 800147c:	4621      	mov	r1, r4
 800147e:	beab      	bkpt	0x00ab
 8001480:	4606      	mov	r6, r0
 8001482:	602e      	str	r6, [r5, #0]
 8001484:	e7ec      	b.n	8001460 <_isatty+0x12>
	...

08001488 <std>:
 8001488:	2300      	movs	r3, #0
 800148a:	b510      	push	{r4, lr}
 800148c:	4604      	mov	r4, r0
 800148e:	e9c0 3300 	strd	r3, r3, [r0]
 8001492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001496:	6083      	str	r3, [r0, #8]
 8001498:	8181      	strh	r1, [r0, #12]
 800149a:	6643      	str	r3, [r0, #100]	; 0x64
 800149c:	81c2      	strh	r2, [r0, #14]
 800149e:	6183      	str	r3, [r0, #24]
 80014a0:	4619      	mov	r1, r3
 80014a2:	2208      	movs	r2, #8
 80014a4:	305c      	adds	r0, #92	; 0x5c
 80014a6:	f000 f906 	bl	80016b6 <memset>
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <std+0x58>)
 80014ac:	6263      	str	r3, [r4, #36]	; 0x24
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <std+0x5c>)
 80014b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <std+0x60>)
 80014b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <std+0x64>)
 80014b8:	6323      	str	r3, [r4, #48]	; 0x30
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <std+0x68>)
 80014bc:	6224      	str	r4, [r4, #32]
 80014be:	429c      	cmp	r4, r3
 80014c0:	d006      	beq.n	80014d0 <std+0x48>
 80014c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80014c6:	4294      	cmp	r4, r2
 80014c8:	d002      	beq.n	80014d0 <std+0x48>
 80014ca:	33d0      	adds	r3, #208	; 0xd0
 80014cc:	429c      	cmp	r4, r3
 80014ce:	d105      	bne.n	80014dc <std+0x54>
 80014d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80014d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014d8:	f000 b966 	b.w	80017a8 <__retarget_lock_init_recursive>
 80014dc:	bd10      	pop	{r4, pc}
 80014de:	bf00      	nop
 80014e0:	08001631 	.word	0x08001631
 80014e4:	08001653 	.word	0x08001653
 80014e8:	0800168b 	.word	0x0800168b
 80014ec:	080016af 	.word	0x080016af
 80014f0:	2000033c 	.word	0x2000033c

080014f4 <stdio_exit_handler>:
 80014f4:	4a02      	ldr	r2, [pc, #8]	; (8001500 <stdio_exit_handler+0xc>)
 80014f6:	4903      	ldr	r1, [pc, #12]	; (8001504 <stdio_exit_handler+0x10>)
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <stdio_exit_handler+0x14>)
 80014fa:	f000 b869 	b.w	80015d0 <_fwalk_sglue>
 80014fe:	bf00      	nop
 8001500:	20000004 	.word	0x20000004
 8001504:	08002045 	.word	0x08002045
 8001508:	20000010 	.word	0x20000010

0800150c <cleanup_stdio>:
 800150c:	6841      	ldr	r1, [r0, #4]
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <cleanup_stdio+0x34>)
 8001510:	4299      	cmp	r1, r3
 8001512:	b510      	push	{r4, lr}
 8001514:	4604      	mov	r4, r0
 8001516:	d001      	beq.n	800151c <cleanup_stdio+0x10>
 8001518:	f000 fd94 	bl	8002044 <_fflush_r>
 800151c:	68a1      	ldr	r1, [r4, #8]
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <cleanup_stdio+0x38>)
 8001520:	4299      	cmp	r1, r3
 8001522:	d002      	beq.n	800152a <cleanup_stdio+0x1e>
 8001524:	4620      	mov	r0, r4
 8001526:	f000 fd8d 	bl	8002044 <_fflush_r>
 800152a:	68e1      	ldr	r1, [r4, #12]
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <cleanup_stdio+0x3c>)
 800152e:	4299      	cmp	r1, r3
 8001530:	d004      	beq.n	800153c <cleanup_stdio+0x30>
 8001532:	4620      	mov	r0, r4
 8001534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001538:	f000 bd84 	b.w	8002044 <_fflush_r>
 800153c:	bd10      	pop	{r4, pc}
 800153e:	bf00      	nop
 8001540:	2000033c 	.word	0x2000033c
 8001544:	200003a4 	.word	0x200003a4
 8001548:	2000040c 	.word	0x2000040c

0800154c <global_stdio_init.part.0>:
 800154c:	b510      	push	{r4, lr}
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <global_stdio_init.part.0+0x30>)
 8001550:	4c0b      	ldr	r4, [pc, #44]	; (8001580 <global_stdio_init.part.0+0x34>)
 8001552:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <global_stdio_init.part.0+0x38>)
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	4620      	mov	r0, r4
 8001558:	2200      	movs	r2, #0
 800155a:	2104      	movs	r1, #4
 800155c:	f7ff ff94 	bl	8001488 <std>
 8001560:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001564:	2201      	movs	r2, #1
 8001566:	2109      	movs	r1, #9
 8001568:	f7ff ff8e 	bl	8001488 <std>
 800156c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001570:	2202      	movs	r2, #2
 8001572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001576:	2112      	movs	r1, #18
 8001578:	f7ff bf86 	b.w	8001488 <std>
 800157c:	20000474 	.word	0x20000474
 8001580:	2000033c 	.word	0x2000033c
 8001584:	080014f5 	.word	0x080014f5

08001588 <__sfp_lock_acquire>:
 8001588:	4801      	ldr	r0, [pc, #4]	; (8001590 <__sfp_lock_acquire+0x8>)
 800158a:	f000 b90e 	b.w	80017aa <__retarget_lock_acquire_recursive>
 800158e:	bf00      	nop
 8001590:	2000047d 	.word	0x2000047d

08001594 <__sfp_lock_release>:
 8001594:	4801      	ldr	r0, [pc, #4]	; (800159c <__sfp_lock_release+0x8>)
 8001596:	f000 b909 	b.w	80017ac <__retarget_lock_release_recursive>
 800159a:	bf00      	nop
 800159c:	2000047d 	.word	0x2000047d

080015a0 <__sinit>:
 80015a0:	b510      	push	{r4, lr}
 80015a2:	4604      	mov	r4, r0
 80015a4:	f7ff fff0 	bl	8001588 <__sfp_lock_acquire>
 80015a8:	6a23      	ldr	r3, [r4, #32]
 80015aa:	b11b      	cbz	r3, 80015b4 <__sinit+0x14>
 80015ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015b0:	f7ff bff0 	b.w	8001594 <__sfp_lock_release>
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__sinit+0x28>)
 80015b6:	6223      	str	r3, [r4, #32]
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <__sinit+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f5      	bne.n	80015ac <__sinit+0xc>
 80015c0:	f7ff ffc4 	bl	800154c <global_stdio_init.part.0>
 80015c4:	e7f2      	b.n	80015ac <__sinit+0xc>
 80015c6:	bf00      	nop
 80015c8:	0800150d 	.word	0x0800150d
 80015cc:	20000474 	.word	0x20000474

080015d0 <_fwalk_sglue>:
 80015d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015d4:	4607      	mov	r7, r0
 80015d6:	4688      	mov	r8, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	2600      	movs	r6, #0
 80015dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015e0:	f1b9 0901 	subs.w	r9, r9, #1
 80015e4:	d505      	bpl.n	80015f2 <_fwalk_sglue+0x22>
 80015e6:	6824      	ldr	r4, [r4, #0]
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d1f7      	bne.n	80015dc <_fwalk_sglue+0xc>
 80015ec:	4630      	mov	r0, r6
 80015ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015f2:	89ab      	ldrh	r3, [r5, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d907      	bls.n	8001608 <_fwalk_sglue+0x38>
 80015f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015fc:	3301      	adds	r3, #1
 80015fe:	d003      	beq.n	8001608 <_fwalk_sglue+0x38>
 8001600:	4629      	mov	r1, r5
 8001602:	4638      	mov	r0, r7
 8001604:	47c0      	blx	r8
 8001606:	4306      	orrs	r6, r0
 8001608:	3568      	adds	r5, #104	; 0x68
 800160a:	e7e9      	b.n	80015e0 <_fwalk_sglue+0x10>

0800160c <iprintf>:
 800160c:	b40f      	push	{r0, r1, r2, r3}
 800160e:	b507      	push	{r0, r1, r2, lr}
 8001610:	4906      	ldr	r1, [pc, #24]	; (800162c <iprintf+0x20>)
 8001612:	ab04      	add	r3, sp, #16
 8001614:	6808      	ldr	r0, [r1, #0]
 8001616:	f853 2b04 	ldr.w	r2, [r3], #4
 800161a:	6881      	ldr	r1, [r0, #8]
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f000 f9e5 	bl	80019ec <_vfiprintf_r>
 8001622:	b003      	add	sp, #12
 8001624:	f85d eb04 	ldr.w	lr, [sp], #4
 8001628:	b004      	add	sp, #16
 800162a:	4770      	bx	lr
 800162c:	2000005c 	.word	0x2000005c

08001630 <__sread>:
 8001630:	b510      	push	{r4, lr}
 8001632:	460c      	mov	r4, r1
 8001634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001638:	f000 f868 	bl	800170c <_read_r>
 800163c:	2800      	cmp	r0, #0
 800163e:	bfab      	itete	ge
 8001640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001642:	89a3      	ldrhlt	r3, [r4, #12]
 8001644:	181b      	addge	r3, r3, r0
 8001646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800164a:	bfac      	ite	ge
 800164c:	6563      	strge	r3, [r4, #84]	; 0x54
 800164e:	81a3      	strhlt	r3, [r4, #12]
 8001650:	bd10      	pop	{r4, pc}

08001652 <__swrite>:
 8001652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001656:	461f      	mov	r7, r3
 8001658:	898b      	ldrh	r3, [r1, #12]
 800165a:	05db      	lsls	r3, r3, #23
 800165c:	4605      	mov	r5, r0
 800165e:	460c      	mov	r4, r1
 8001660:	4616      	mov	r6, r2
 8001662:	d505      	bpl.n	8001670 <__swrite+0x1e>
 8001664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001668:	2302      	movs	r3, #2
 800166a:	2200      	movs	r2, #0
 800166c:	f000 f83c 	bl	80016e8 <_lseek_r>
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800167a:	81a3      	strh	r3, [r4, #12]
 800167c:	4632      	mov	r2, r6
 800167e:	463b      	mov	r3, r7
 8001680:	4628      	mov	r0, r5
 8001682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001686:	f000 b853 	b.w	8001730 <_write_r>

0800168a <__sseek>:
 800168a:	b510      	push	{r4, lr}
 800168c:	460c      	mov	r4, r1
 800168e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001692:	f000 f829 	bl	80016e8 <_lseek_r>
 8001696:	1c43      	adds	r3, r0, #1
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	bf15      	itete	ne
 800169c:	6560      	strne	r0, [r4, #84]	; 0x54
 800169e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80016a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80016a6:	81a3      	strheq	r3, [r4, #12]
 80016a8:	bf18      	it	ne
 80016aa:	81a3      	strhne	r3, [r4, #12]
 80016ac:	bd10      	pop	{r4, pc}

080016ae <__sclose>:
 80016ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016b2:	f000 b809 	b.w	80016c8 <_close_r>

080016b6 <memset>:
 80016b6:	4402      	add	r2, r0
 80016b8:	4603      	mov	r3, r0
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d100      	bne.n	80016c0 <memset+0xa>
 80016be:	4770      	bx	lr
 80016c0:	f803 1b01 	strb.w	r1, [r3], #1
 80016c4:	e7f9      	b.n	80016ba <memset+0x4>
	...

080016c8 <_close_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4d06      	ldr	r5, [pc, #24]	; (80016e4 <_close_r+0x1c>)
 80016cc:	2300      	movs	r3, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	602b      	str	r3, [r5, #0]
 80016d4:	f7ff fe42 	bl	800135c <_close>
 80016d8:	1c43      	adds	r3, r0, #1
 80016da:	d102      	bne.n	80016e2 <_close_r+0x1a>
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	b103      	cbz	r3, 80016e2 <_close_r+0x1a>
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	20000478 	.word	0x20000478

080016e8 <_lseek_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4d07      	ldr	r5, [pc, #28]	; (8001708 <_lseek_r+0x20>)
 80016ec:	4604      	mov	r4, r0
 80016ee:	4608      	mov	r0, r1
 80016f0:	4611      	mov	r1, r2
 80016f2:	2200      	movs	r2, #0
 80016f4:	602a      	str	r2, [r5, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	f7ff fdf1 	bl	80012de <_lseek>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d102      	bne.n	8001706 <_lseek_r+0x1e>
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	b103      	cbz	r3, 8001706 <_lseek_r+0x1e>
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	bd38      	pop	{r3, r4, r5, pc}
 8001708:	20000478 	.word	0x20000478

0800170c <_read_r>:
 800170c:	b538      	push	{r3, r4, r5, lr}
 800170e:	4d07      	ldr	r5, [pc, #28]	; (800172c <_read_r+0x20>)
 8001710:	4604      	mov	r4, r0
 8001712:	4608      	mov	r0, r1
 8001714:	4611      	mov	r1, r2
 8001716:	2200      	movs	r2, #0
 8001718:	602a      	str	r2, [r5, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	f7ff fd89 	bl	8001232 <_read>
 8001720:	1c43      	adds	r3, r0, #1
 8001722:	d102      	bne.n	800172a <_read_r+0x1e>
 8001724:	682b      	ldr	r3, [r5, #0]
 8001726:	b103      	cbz	r3, 800172a <_read_r+0x1e>
 8001728:	6023      	str	r3, [r4, #0]
 800172a:	bd38      	pop	{r3, r4, r5, pc}
 800172c:	20000478 	.word	0x20000478

08001730 <_write_r>:
 8001730:	b538      	push	{r3, r4, r5, lr}
 8001732:	4d07      	ldr	r5, [pc, #28]	; (8001750 <_write_r+0x20>)
 8001734:	4604      	mov	r4, r0
 8001736:	4608      	mov	r0, r1
 8001738:	4611      	mov	r1, r2
 800173a:	2200      	movs	r2, #0
 800173c:	602a      	str	r2, [r5, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	f7ff fddf 	bl	8001302 <_write>
 8001744:	1c43      	adds	r3, r0, #1
 8001746:	d102      	bne.n	800174e <_write_r+0x1e>
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	b103      	cbz	r3, 800174e <_write_r+0x1e>
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	bd38      	pop	{r3, r4, r5, pc}
 8001750:	20000478 	.word	0x20000478

08001754 <__errno>:
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <__errno+0x8>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000005c 	.word	0x2000005c

08001760 <__libc_init_array>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	4d0d      	ldr	r5, [pc, #52]	; (8001798 <__libc_init_array+0x38>)
 8001764:	4c0d      	ldr	r4, [pc, #52]	; (800179c <__libc_init_array+0x3c>)
 8001766:	1b64      	subs	r4, r4, r5
 8001768:	10a4      	asrs	r4, r4, #2
 800176a:	2600      	movs	r6, #0
 800176c:	42a6      	cmp	r6, r4
 800176e:	d109      	bne.n	8001784 <__libc_init_array+0x24>
 8001770:	4d0b      	ldr	r5, [pc, #44]	; (80017a0 <__libc_init_array+0x40>)
 8001772:	4c0c      	ldr	r4, [pc, #48]	; (80017a4 <__libc_init_array+0x44>)
 8001774:	f000 fdb8 	bl	80022e8 <_init>
 8001778:	1b64      	subs	r4, r4, r5
 800177a:	10a4      	asrs	r4, r4, #2
 800177c:	2600      	movs	r6, #0
 800177e:	42a6      	cmp	r6, r4
 8001780:	d105      	bne.n	800178e <__libc_init_array+0x2e>
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	f855 3b04 	ldr.w	r3, [r5], #4
 8001788:	4798      	blx	r3
 800178a:	3601      	adds	r6, #1
 800178c:	e7ee      	b.n	800176c <__libc_init_array+0xc>
 800178e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001792:	4798      	blx	r3
 8001794:	3601      	adds	r6, #1
 8001796:	e7f2      	b.n	800177e <__libc_init_array+0x1e>
 8001798:	08002344 	.word	0x08002344
 800179c:	08002344 	.word	0x08002344
 80017a0:	08002344 	.word	0x08002344
 80017a4:	08002348 	.word	0x08002348

080017a8 <__retarget_lock_init_recursive>:
 80017a8:	4770      	bx	lr

080017aa <__retarget_lock_acquire_recursive>:
 80017aa:	4770      	bx	lr

080017ac <__retarget_lock_release_recursive>:
 80017ac:	4770      	bx	lr
	...

080017b0 <_free_r>:
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4605      	mov	r5, r0
 80017b4:	2900      	cmp	r1, #0
 80017b6:	d041      	beq.n	800183c <_free_r+0x8c>
 80017b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017bc:	1f0c      	subs	r4, r1, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bfb8      	it	lt
 80017c2:	18e4      	addlt	r4, r4, r3
 80017c4:	f000 f8de 	bl	8001984 <__malloc_lock>
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <_free_r+0x90>)
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	b933      	cbnz	r3, 80017dc <_free_r+0x2c>
 80017ce:	6063      	str	r3, [r4, #4]
 80017d0:	6014      	str	r4, [r2, #0]
 80017d2:	4628      	mov	r0, r5
 80017d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017d8:	f000 b8da 	b.w	8001990 <__malloc_unlock>
 80017dc:	42a3      	cmp	r3, r4
 80017de:	d908      	bls.n	80017f2 <_free_r+0x42>
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	1821      	adds	r1, r4, r0
 80017e4:	428b      	cmp	r3, r1
 80017e6:	bf01      	itttt	eq
 80017e8:	6819      	ldreq	r1, [r3, #0]
 80017ea:	685b      	ldreq	r3, [r3, #4]
 80017ec:	1809      	addeq	r1, r1, r0
 80017ee:	6021      	streq	r1, [r4, #0]
 80017f0:	e7ed      	b.n	80017ce <_free_r+0x1e>
 80017f2:	461a      	mov	r2, r3
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	b10b      	cbz	r3, 80017fc <_free_r+0x4c>
 80017f8:	42a3      	cmp	r3, r4
 80017fa:	d9fa      	bls.n	80017f2 <_free_r+0x42>
 80017fc:	6811      	ldr	r1, [r2, #0]
 80017fe:	1850      	adds	r0, r2, r1
 8001800:	42a0      	cmp	r0, r4
 8001802:	d10b      	bne.n	800181c <_free_r+0x6c>
 8001804:	6820      	ldr	r0, [r4, #0]
 8001806:	4401      	add	r1, r0
 8001808:	1850      	adds	r0, r2, r1
 800180a:	4283      	cmp	r3, r0
 800180c:	6011      	str	r1, [r2, #0]
 800180e:	d1e0      	bne.n	80017d2 <_free_r+0x22>
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	6053      	str	r3, [r2, #4]
 8001816:	4408      	add	r0, r1
 8001818:	6010      	str	r0, [r2, #0]
 800181a:	e7da      	b.n	80017d2 <_free_r+0x22>
 800181c:	d902      	bls.n	8001824 <_free_r+0x74>
 800181e:	230c      	movs	r3, #12
 8001820:	602b      	str	r3, [r5, #0]
 8001822:	e7d6      	b.n	80017d2 <_free_r+0x22>
 8001824:	6820      	ldr	r0, [r4, #0]
 8001826:	1821      	adds	r1, r4, r0
 8001828:	428b      	cmp	r3, r1
 800182a:	bf04      	itt	eq
 800182c:	6819      	ldreq	r1, [r3, #0]
 800182e:	685b      	ldreq	r3, [r3, #4]
 8001830:	6063      	str	r3, [r4, #4]
 8001832:	bf04      	itt	eq
 8001834:	1809      	addeq	r1, r1, r0
 8001836:	6021      	streq	r1, [r4, #0]
 8001838:	6054      	str	r4, [r2, #4]
 800183a:	e7ca      	b.n	80017d2 <_free_r+0x22>
 800183c:	bd38      	pop	{r3, r4, r5, pc}
 800183e:	bf00      	nop
 8001840:	20000480 	.word	0x20000480

08001844 <sbrk_aligned>:
 8001844:	b570      	push	{r4, r5, r6, lr}
 8001846:	4e0e      	ldr	r6, [pc, #56]	; (8001880 <sbrk_aligned+0x3c>)
 8001848:	460c      	mov	r4, r1
 800184a:	6831      	ldr	r1, [r6, #0]
 800184c:	4605      	mov	r5, r0
 800184e:	b911      	cbnz	r1, 8001856 <sbrk_aligned+0x12>
 8001850:	f000 fcb6 	bl	80021c0 <_sbrk_r>
 8001854:	6030      	str	r0, [r6, #0]
 8001856:	4621      	mov	r1, r4
 8001858:	4628      	mov	r0, r5
 800185a:	f000 fcb1 	bl	80021c0 <_sbrk_r>
 800185e:	1c43      	adds	r3, r0, #1
 8001860:	d00a      	beq.n	8001878 <sbrk_aligned+0x34>
 8001862:	1cc4      	adds	r4, r0, #3
 8001864:	f024 0403 	bic.w	r4, r4, #3
 8001868:	42a0      	cmp	r0, r4
 800186a:	d007      	beq.n	800187c <sbrk_aligned+0x38>
 800186c:	1a21      	subs	r1, r4, r0
 800186e:	4628      	mov	r0, r5
 8001870:	f000 fca6 	bl	80021c0 <_sbrk_r>
 8001874:	3001      	adds	r0, #1
 8001876:	d101      	bne.n	800187c <sbrk_aligned+0x38>
 8001878:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800187c:	4620      	mov	r0, r4
 800187e:	bd70      	pop	{r4, r5, r6, pc}
 8001880:	20000484 	.word	0x20000484

08001884 <_malloc_r>:
 8001884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001888:	1ccd      	adds	r5, r1, #3
 800188a:	f025 0503 	bic.w	r5, r5, #3
 800188e:	3508      	adds	r5, #8
 8001890:	2d0c      	cmp	r5, #12
 8001892:	bf38      	it	cc
 8001894:	250c      	movcc	r5, #12
 8001896:	2d00      	cmp	r5, #0
 8001898:	4607      	mov	r7, r0
 800189a:	db01      	blt.n	80018a0 <_malloc_r+0x1c>
 800189c:	42a9      	cmp	r1, r5
 800189e:	d905      	bls.n	80018ac <_malloc_r+0x28>
 80018a0:	230c      	movs	r3, #12
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	2600      	movs	r6, #0
 80018a6:	4630      	mov	r0, r6
 80018a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001980 <_malloc_r+0xfc>
 80018b0:	f000 f868 	bl	8001984 <__malloc_lock>
 80018b4:	f8d8 3000 	ldr.w	r3, [r8]
 80018b8:	461c      	mov	r4, r3
 80018ba:	bb5c      	cbnz	r4, 8001914 <_malloc_r+0x90>
 80018bc:	4629      	mov	r1, r5
 80018be:	4638      	mov	r0, r7
 80018c0:	f7ff ffc0 	bl	8001844 <sbrk_aligned>
 80018c4:	1c43      	adds	r3, r0, #1
 80018c6:	4604      	mov	r4, r0
 80018c8:	d155      	bne.n	8001976 <_malloc_r+0xf2>
 80018ca:	f8d8 4000 	ldr.w	r4, [r8]
 80018ce:	4626      	mov	r6, r4
 80018d0:	2e00      	cmp	r6, #0
 80018d2:	d145      	bne.n	8001960 <_malloc_r+0xdc>
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d048      	beq.n	800196a <_malloc_r+0xe6>
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	4631      	mov	r1, r6
 80018dc:	4638      	mov	r0, r7
 80018de:	eb04 0903 	add.w	r9, r4, r3
 80018e2:	f000 fc6d 	bl	80021c0 <_sbrk_r>
 80018e6:	4581      	cmp	r9, r0
 80018e8:	d13f      	bne.n	800196a <_malloc_r+0xe6>
 80018ea:	6821      	ldr	r1, [r4, #0]
 80018ec:	1a6d      	subs	r5, r5, r1
 80018ee:	4629      	mov	r1, r5
 80018f0:	4638      	mov	r0, r7
 80018f2:	f7ff ffa7 	bl	8001844 <sbrk_aligned>
 80018f6:	3001      	adds	r0, #1
 80018f8:	d037      	beq.n	800196a <_malloc_r+0xe6>
 80018fa:	6823      	ldr	r3, [r4, #0]
 80018fc:	442b      	add	r3, r5
 80018fe:	6023      	str	r3, [r4, #0]
 8001900:	f8d8 3000 	ldr.w	r3, [r8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d038      	beq.n	800197a <_malloc_r+0xf6>
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	42a2      	cmp	r2, r4
 800190c:	d12b      	bne.n	8001966 <_malloc_r+0xe2>
 800190e:	2200      	movs	r2, #0
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e00f      	b.n	8001934 <_malloc_r+0xb0>
 8001914:	6822      	ldr	r2, [r4, #0]
 8001916:	1b52      	subs	r2, r2, r5
 8001918:	d41f      	bmi.n	800195a <_malloc_r+0xd6>
 800191a:	2a0b      	cmp	r2, #11
 800191c:	d917      	bls.n	800194e <_malloc_r+0xca>
 800191e:	1961      	adds	r1, r4, r5
 8001920:	42a3      	cmp	r3, r4
 8001922:	6025      	str	r5, [r4, #0]
 8001924:	bf18      	it	ne
 8001926:	6059      	strne	r1, [r3, #4]
 8001928:	6863      	ldr	r3, [r4, #4]
 800192a:	bf08      	it	eq
 800192c:	f8c8 1000 	streq.w	r1, [r8]
 8001930:	5162      	str	r2, [r4, r5]
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	4638      	mov	r0, r7
 8001936:	f104 060b 	add.w	r6, r4, #11
 800193a:	f000 f829 	bl	8001990 <__malloc_unlock>
 800193e:	f026 0607 	bic.w	r6, r6, #7
 8001942:	1d23      	adds	r3, r4, #4
 8001944:	1af2      	subs	r2, r6, r3
 8001946:	d0ae      	beq.n	80018a6 <_malloc_r+0x22>
 8001948:	1b9b      	subs	r3, r3, r6
 800194a:	50a3      	str	r3, [r4, r2]
 800194c:	e7ab      	b.n	80018a6 <_malloc_r+0x22>
 800194e:	42a3      	cmp	r3, r4
 8001950:	6862      	ldr	r2, [r4, #4]
 8001952:	d1dd      	bne.n	8001910 <_malloc_r+0x8c>
 8001954:	f8c8 2000 	str.w	r2, [r8]
 8001958:	e7ec      	b.n	8001934 <_malloc_r+0xb0>
 800195a:	4623      	mov	r3, r4
 800195c:	6864      	ldr	r4, [r4, #4]
 800195e:	e7ac      	b.n	80018ba <_malloc_r+0x36>
 8001960:	4634      	mov	r4, r6
 8001962:	6876      	ldr	r6, [r6, #4]
 8001964:	e7b4      	b.n	80018d0 <_malloc_r+0x4c>
 8001966:	4613      	mov	r3, r2
 8001968:	e7cc      	b.n	8001904 <_malloc_r+0x80>
 800196a:	230c      	movs	r3, #12
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4638      	mov	r0, r7
 8001970:	f000 f80e 	bl	8001990 <__malloc_unlock>
 8001974:	e797      	b.n	80018a6 <_malloc_r+0x22>
 8001976:	6025      	str	r5, [r4, #0]
 8001978:	e7dc      	b.n	8001934 <_malloc_r+0xb0>
 800197a:	605b      	str	r3, [r3, #4]
 800197c:	deff      	udf	#255	; 0xff
 800197e:	bf00      	nop
 8001980:	20000480 	.word	0x20000480

08001984 <__malloc_lock>:
 8001984:	4801      	ldr	r0, [pc, #4]	; (800198c <__malloc_lock+0x8>)
 8001986:	f7ff bf10 	b.w	80017aa <__retarget_lock_acquire_recursive>
 800198a:	bf00      	nop
 800198c:	2000047c 	.word	0x2000047c

08001990 <__malloc_unlock>:
 8001990:	4801      	ldr	r0, [pc, #4]	; (8001998 <__malloc_unlock+0x8>)
 8001992:	f7ff bf0b 	b.w	80017ac <__retarget_lock_release_recursive>
 8001996:	bf00      	nop
 8001998:	2000047c 	.word	0x2000047c

0800199c <__sfputc_r>:
 800199c:	6893      	ldr	r3, [r2, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	b410      	push	{r4}
 80019a4:	6093      	str	r3, [r2, #8]
 80019a6:	da07      	bge.n	80019b8 <__sfputc_r+0x1c>
 80019a8:	6994      	ldr	r4, [r2, #24]
 80019aa:	42a3      	cmp	r3, r4
 80019ac:	db01      	blt.n	80019b2 <__sfputc_r+0x16>
 80019ae:	290a      	cmp	r1, #10
 80019b0:	d102      	bne.n	80019b8 <__sfputc_r+0x1c>
 80019b2:	bc10      	pop	{r4}
 80019b4:	f000 bb6e 	b.w	8002094 <__swbuf_r>
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	1c58      	adds	r0, r3, #1
 80019bc:	6010      	str	r0, [r2, #0]
 80019be:	7019      	strb	r1, [r3, #0]
 80019c0:	4608      	mov	r0, r1
 80019c2:	bc10      	pop	{r4}
 80019c4:	4770      	bx	lr

080019c6 <__sfputs_r>:
 80019c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c8:	4606      	mov	r6, r0
 80019ca:	460f      	mov	r7, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	18d5      	adds	r5, r2, r3
 80019d0:	42ac      	cmp	r4, r5
 80019d2:	d101      	bne.n	80019d8 <__sfputs_r+0x12>
 80019d4:	2000      	movs	r0, #0
 80019d6:	e007      	b.n	80019e8 <__sfputs_r+0x22>
 80019d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019dc:	463a      	mov	r2, r7
 80019de:	4630      	mov	r0, r6
 80019e0:	f7ff ffdc 	bl	800199c <__sfputc_r>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d1f3      	bne.n	80019d0 <__sfputs_r+0xa>
 80019e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080019ec <_vfiprintf_r>:
 80019ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019f0:	460d      	mov	r5, r1
 80019f2:	b09d      	sub	sp, #116	; 0x74
 80019f4:	4614      	mov	r4, r2
 80019f6:	4698      	mov	r8, r3
 80019f8:	4606      	mov	r6, r0
 80019fa:	b118      	cbz	r0, 8001a04 <_vfiprintf_r+0x18>
 80019fc:	6a03      	ldr	r3, [r0, #32]
 80019fe:	b90b      	cbnz	r3, 8001a04 <_vfiprintf_r+0x18>
 8001a00:	f7ff fdce 	bl	80015a0 <__sinit>
 8001a04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a06:	07d9      	lsls	r1, r3, #31
 8001a08:	d405      	bmi.n	8001a16 <_vfiprintf_r+0x2a>
 8001a0a:	89ab      	ldrh	r3, [r5, #12]
 8001a0c:	059a      	lsls	r2, r3, #22
 8001a0e:	d402      	bmi.n	8001a16 <_vfiprintf_r+0x2a>
 8001a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a12:	f7ff feca 	bl	80017aa <__retarget_lock_acquire_recursive>
 8001a16:	89ab      	ldrh	r3, [r5, #12]
 8001a18:	071b      	lsls	r3, r3, #28
 8001a1a:	d501      	bpl.n	8001a20 <_vfiprintf_r+0x34>
 8001a1c:	692b      	ldr	r3, [r5, #16]
 8001a1e:	b99b      	cbnz	r3, 8001a48 <_vfiprintf_r+0x5c>
 8001a20:	4629      	mov	r1, r5
 8001a22:	4630      	mov	r0, r6
 8001a24:	f000 fb74 	bl	8002110 <__swsetup_r>
 8001a28:	b170      	cbz	r0, 8001a48 <_vfiprintf_r+0x5c>
 8001a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a2c:	07dc      	lsls	r4, r3, #31
 8001a2e:	d504      	bpl.n	8001a3a <_vfiprintf_r+0x4e>
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a34:	b01d      	add	sp, #116	; 0x74
 8001a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a3a:	89ab      	ldrh	r3, [r5, #12]
 8001a3c:	0598      	lsls	r0, r3, #22
 8001a3e:	d4f7      	bmi.n	8001a30 <_vfiprintf_r+0x44>
 8001a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a42:	f7ff feb3 	bl	80017ac <__retarget_lock_release_recursive>
 8001a46:	e7f3      	b.n	8001a30 <_vfiprintf_r+0x44>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a56:	2330      	movs	r3, #48	; 0x30
 8001a58:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001c0c <_vfiprintf_r+0x220>
 8001a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001a60:	f04f 0901 	mov.w	r9, #1
 8001a64:	4623      	mov	r3, r4
 8001a66:	469a      	mov	sl, r3
 8001a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a6c:	b10a      	cbz	r2, 8001a72 <_vfiprintf_r+0x86>
 8001a6e:	2a25      	cmp	r2, #37	; 0x25
 8001a70:	d1f9      	bne.n	8001a66 <_vfiprintf_r+0x7a>
 8001a72:	ebba 0b04 	subs.w	fp, sl, r4
 8001a76:	d00b      	beq.n	8001a90 <_vfiprintf_r+0xa4>
 8001a78:	465b      	mov	r3, fp
 8001a7a:	4622      	mov	r2, r4
 8001a7c:	4629      	mov	r1, r5
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f7ff ffa1 	bl	80019c6 <__sfputs_r>
 8001a84:	3001      	adds	r0, #1
 8001a86:	f000 80a9 	beq.w	8001bdc <_vfiprintf_r+0x1f0>
 8001a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a8c:	445a      	add	r2, fp
 8001a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8001a90:	f89a 3000 	ldrb.w	r3, [sl]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a1 	beq.w	8001bdc <_vfiprintf_r+0x1f0>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001aa4:	f10a 0a01 	add.w	sl, sl, #1
 8001aa8:	9304      	str	r3, [sp, #16]
 8001aaa:	9307      	str	r3, [sp, #28]
 8001aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8001ab2:	4654      	mov	r4, sl
 8001ab4:	2205      	movs	r2, #5
 8001ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001aba:	4854      	ldr	r0, [pc, #336]	; (8001c0c <_vfiprintf_r+0x220>)
 8001abc:	f7fe fba8 	bl	8000210 <memchr>
 8001ac0:	9a04      	ldr	r2, [sp, #16]
 8001ac2:	b9d8      	cbnz	r0, 8001afc <_vfiprintf_r+0x110>
 8001ac4:	06d1      	lsls	r1, r2, #27
 8001ac6:	bf44      	itt	mi
 8001ac8:	2320      	movmi	r3, #32
 8001aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ace:	0713      	lsls	r3, r2, #28
 8001ad0:	bf44      	itt	mi
 8001ad2:	232b      	movmi	r3, #43	; 0x2b
 8001ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8001adc:	2b2a      	cmp	r3, #42	; 0x2a
 8001ade:	d015      	beq.n	8001b0c <_vfiprintf_r+0x120>
 8001ae0:	9a07      	ldr	r2, [sp, #28]
 8001ae2:	4654      	mov	r4, sl
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f04f 0c0a 	mov.w	ip, #10
 8001aea:	4621      	mov	r1, r4
 8001aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001af0:	3b30      	subs	r3, #48	; 0x30
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d94d      	bls.n	8001b92 <_vfiprintf_r+0x1a6>
 8001af6:	b1b0      	cbz	r0, 8001b26 <_vfiprintf_r+0x13a>
 8001af8:	9207      	str	r2, [sp, #28]
 8001afa:	e014      	b.n	8001b26 <_vfiprintf_r+0x13a>
 8001afc:	eba0 0308 	sub.w	r3, r0, r8
 8001b00:	fa09 f303 	lsl.w	r3, r9, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	9304      	str	r3, [sp, #16]
 8001b08:	46a2      	mov	sl, r4
 8001b0a:	e7d2      	b.n	8001ab2 <_vfiprintf_r+0xc6>
 8001b0c:	9b03      	ldr	r3, [sp, #12]
 8001b0e:	1d19      	adds	r1, r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	9103      	str	r1, [sp, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bfbb      	ittet	lt
 8001b18:	425b      	neglt	r3, r3
 8001b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8001b1e:	9307      	strge	r3, [sp, #28]
 8001b20:	9307      	strlt	r3, [sp, #28]
 8001b22:	bfb8      	it	lt
 8001b24:	9204      	strlt	r2, [sp, #16]
 8001b26:	7823      	ldrb	r3, [r4, #0]
 8001b28:	2b2e      	cmp	r3, #46	; 0x2e
 8001b2a:	d10c      	bne.n	8001b46 <_vfiprintf_r+0x15a>
 8001b2c:	7863      	ldrb	r3, [r4, #1]
 8001b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8001b30:	d134      	bne.n	8001b9c <_vfiprintf_r+0x1b0>
 8001b32:	9b03      	ldr	r3, [sp, #12]
 8001b34:	1d1a      	adds	r2, r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	9203      	str	r2, [sp, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bfb8      	it	lt
 8001b3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001b42:	3402      	adds	r4, #2
 8001b44:	9305      	str	r3, [sp, #20]
 8001b46:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001c10 <_vfiprintf_r+0x224>
 8001b4a:	7821      	ldrb	r1, [r4, #0]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4650      	mov	r0, sl
 8001b50:	f7fe fb5e 	bl	8000210 <memchr>
 8001b54:	b138      	cbz	r0, 8001b66 <_vfiprintf_r+0x17a>
 8001b56:	9b04      	ldr	r3, [sp, #16]
 8001b58:	eba0 000a 	sub.w	r0, r0, sl
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	4082      	lsls	r2, r0
 8001b60:	4313      	orrs	r3, r2
 8001b62:	3401      	adds	r4, #1
 8001b64:	9304      	str	r3, [sp, #16]
 8001b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b6a:	482a      	ldr	r0, [pc, #168]	; (8001c14 <_vfiprintf_r+0x228>)
 8001b6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b70:	2206      	movs	r2, #6
 8001b72:	f7fe fb4d 	bl	8000210 <memchr>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d03f      	beq.n	8001bfa <_vfiprintf_r+0x20e>
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <_vfiprintf_r+0x22c>)
 8001b7c:	bb1b      	cbnz	r3, 8001bc6 <_vfiprintf_r+0x1da>
 8001b7e:	9b03      	ldr	r3, [sp, #12]
 8001b80:	3307      	adds	r3, #7
 8001b82:	f023 0307 	bic.w	r3, r3, #7
 8001b86:	3308      	adds	r3, #8
 8001b88:	9303      	str	r3, [sp, #12]
 8001b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b8c:	443b      	add	r3, r7
 8001b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8001b90:	e768      	b.n	8001a64 <_vfiprintf_r+0x78>
 8001b92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b96:	460c      	mov	r4, r1
 8001b98:	2001      	movs	r0, #1
 8001b9a:	e7a6      	b.n	8001aea <_vfiprintf_r+0xfe>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	3401      	adds	r4, #1
 8001ba0:	9305      	str	r3, [sp, #20]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f04f 0c0a 	mov.w	ip, #10
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001bae:	3a30      	subs	r2, #48	; 0x30
 8001bb0:	2a09      	cmp	r2, #9
 8001bb2:	d903      	bls.n	8001bbc <_vfiprintf_r+0x1d0>
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0c6      	beq.n	8001b46 <_vfiprintf_r+0x15a>
 8001bb8:	9105      	str	r1, [sp, #20]
 8001bba:	e7c4      	b.n	8001b46 <_vfiprintf_r+0x15a>
 8001bbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e7f0      	b.n	8001ba8 <_vfiprintf_r+0x1bc>
 8001bc6:	ab03      	add	r3, sp, #12
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	462a      	mov	r2, r5
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <_vfiprintf_r+0x230>)
 8001bce:	a904      	add	r1, sp, #16
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f3af 8000 	nop.w
 8001bd6:	4607      	mov	r7, r0
 8001bd8:	1c78      	adds	r0, r7, #1
 8001bda:	d1d6      	bne.n	8001b8a <_vfiprintf_r+0x19e>
 8001bdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001bde:	07d9      	lsls	r1, r3, #31
 8001be0:	d405      	bmi.n	8001bee <_vfiprintf_r+0x202>
 8001be2:	89ab      	ldrh	r3, [r5, #12]
 8001be4:	059a      	lsls	r2, r3, #22
 8001be6:	d402      	bmi.n	8001bee <_vfiprintf_r+0x202>
 8001be8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001bea:	f7ff fddf 	bl	80017ac <__retarget_lock_release_recursive>
 8001bee:	89ab      	ldrh	r3, [r5, #12]
 8001bf0:	065b      	lsls	r3, r3, #25
 8001bf2:	f53f af1d 	bmi.w	8001a30 <_vfiprintf_r+0x44>
 8001bf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001bf8:	e71c      	b.n	8001a34 <_vfiprintf_r+0x48>
 8001bfa:	ab03      	add	r3, sp, #12
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	462a      	mov	r2, r5
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <_vfiprintf_r+0x230>)
 8001c02:	a904      	add	r1, sp, #16
 8001c04:	4630      	mov	r0, r6
 8001c06:	f000 f879 	bl	8001cfc <_printf_i>
 8001c0a:	e7e4      	b.n	8001bd6 <_vfiprintf_r+0x1ea>
 8001c0c:	08002310 	.word	0x08002310
 8001c10:	08002316 	.word	0x08002316
 8001c14:	0800231a 	.word	0x0800231a
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	080019c7 	.word	0x080019c7

08001c20 <_printf_common>:
 8001c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c24:	4616      	mov	r6, r2
 8001c26:	4699      	mov	r9, r3
 8001c28:	688a      	ldr	r2, [r1, #8]
 8001c2a:	690b      	ldr	r3, [r1, #16]
 8001c2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c30:	4293      	cmp	r3, r2
 8001c32:	bfb8      	it	lt
 8001c34:	4613      	movlt	r3, r2
 8001c36:	6033      	str	r3, [r6, #0]
 8001c38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c3c:	4607      	mov	r7, r0
 8001c3e:	460c      	mov	r4, r1
 8001c40:	b10a      	cbz	r2, 8001c46 <_printf_common+0x26>
 8001c42:	3301      	adds	r3, #1
 8001c44:	6033      	str	r3, [r6, #0]
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	0699      	lsls	r1, r3, #26
 8001c4a:	bf42      	ittt	mi
 8001c4c:	6833      	ldrmi	r3, [r6, #0]
 8001c4e:	3302      	addmi	r3, #2
 8001c50:	6033      	strmi	r3, [r6, #0]
 8001c52:	6825      	ldr	r5, [r4, #0]
 8001c54:	f015 0506 	ands.w	r5, r5, #6
 8001c58:	d106      	bne.n	8001c68 <_printf_common+0x48>
 8001c5a:	f104 0a19 	add.w	sl, r4, #25
 8001c5e:	68e3      	ldr	r3, [r4, #12]
 8001c60:	6832      	ldr	r2, [r6, #0]
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	42ab      	cmp	r3, r5
 8001c66:	dc26      	bgt.n	8001cb6 <_printf_common+0x96>
 8001c68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001c6c:	1e13      	subs	r3, r2, #0
 8001c6e:	6822      	ldr	r2, [r4, #0]
 8001c70:	bf18      	it	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	0692      	lsls	r2, r2, #26
 8001c76:	d42b      	bmi.n	8001cd0 <_printf_common+0xb0>
 8001c78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c7c:	4649      	mov	r1, r9
 8001c7e:	4638      	mov	r0, r7
 8001c80:	47c0      	blx	r8
 8001c82:	3001      	adds	r0, #1
 8001c84:	d01e      	beq.n	8001cc4 <_printf_common+0xa4>
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	6922      	ldr	r2, [r4, #16]
 8001c8a:	f003 0306 	and.w	r3, r3, #6
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf02      	ittt	eq
 8001c92:	68e5      	ldreq	r5, [r4, #12]
 8001c94:	6833      	ldreq	r3, [r6, #0]
 8001c96:	1aed      	subeq	r5, r5, r3
 8001c98:	68a3      	ldr	r3, [r4, #8]
 8001c9a:	bf0c      	ite	eq
 8001c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ca0:	2500      	movne	r5, #0
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	bfc4      	itt	gt
 8001ca6:	1a9b      	subgt	r3, r3, r2
 8001ca8:	18ed      	addgt	r5, r5, r3
 8001caa:	2600      	movs	r6, #0
 8001cac:	341a      	adds	r4, #26
 8001cae:	42b5      	cmp	r5, r6
 8001cb0:	d11a      	bne.n	8001ce8 <_printf_common+0xc8>
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	e008      	b.n	8001cc8 <_printf_common+0xa8>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	4652      	mov	r2, sl
 8001cba:	4649      	mov	r1, r9
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	47c0      	blx	r8
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d103      	bne.n	8001ccc <_printf_common+0xac>
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ccc:	3501      	adds	r5, #1
 8001cce:	e7c6      	b.n	8001c5e <_printf_common+0x3e>
 8001cd0:	18e1      	adds	r1, r4, r3
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	2030      	movs	r0, #48	; 0x30
 8001cd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001cda:	4422      	add	r2, r4
 8001cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ce4:	3302      	adds	r3, #2
 8001ce6:	e7c7      	b.n	8001c78 <_printf_common+0x58>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	4622      	mov	r2, r4
 8001cec:	4649      	mov	r1, r9
 8001cee:	4638      	mov	r0, r7
 8001cf0:	47c0      	blx	r8
 8001cf2:	3001      	adds	r0, #1
 8001cf4:	d0e6      	beq.n	8001cc4 <_printf_common+0xa4>
 8001cf6:	3601      	adds	r6, #1
 8001cf8:	e7d9      	b.n	8001cae <_printf_common+0x8e>
	...

08001cfc <_printf_i>:
 8001cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d00:	7e0f      	ldrb	r7, [r1, #24]
 8001d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d04:	2f78      	cmp	r7, #120	; 0x78
 8001d06:	4691      	mov	r9, r2
 8001d08:	4680      	mov	r8, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	469a      	mov	sl, r3
 8001d0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d12:	d807      	bhi.n	8001d24 <_printf_i+0x28>
 8001d14:	2f62      	cmp	r7, #98	; 0x62
 8001d16:	d80a      	bhi.n	8001d2e <_printf_i+0x32>
 8001d18:	2f00      	cmp	r7, #0
 8001d1a:	f000 80d4 	beq.w	8001ec6 <_printf_i+0x1ca>
 8001d1e:	2f58      	cmp	r7, #88	; 0x58
 8001d20:	f000 80c0 	beq.w	8001ea4 <_printf_i+0x1a8>
 8001d24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d2c:	e03a      	b.n	8001da4 <_printf_i+0xa8>
 8001d2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d32:	2b15      	cmp	r3, #21
 8001d34:	d8f6      	bhi.n	8001d24 <_printf_i+0x28>
 8001d36:	a101      	add	r1, pc, #4	; (adr r1, 8001d3c <_printf_i+0x40>)
 8001d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d3c:	08001d95 	.word	0x08001d95
 8001d40:	08001da9 	.word	0x08001da9
 8001d44:	08001d25 	.word	0x08001d25
 8001d48:	08001d25 	.word	0x08001d25
 8001d4c:	08001d25 	.word	0x08001d25
 8001d50:	08001d25 	.word	0x08001d25
 8001d54:	08001da9 	.word	0x08001da9
 8001d58:	08001d25 	.word	0x08001d25
 8001d5c:	08001d25 	.word	0x08001d25
 8001d60:	08001d25 	.word	0x08001d25
 8001d64:	08001d25 	.word	0x08001d25
 8001d68:	08001ead 	.word	0x08001ead
 8001d6c:	08001dd5 	.word	0x08001dd5
 8001d70:	08001e67 	.word	0x08001e67
 8001d74:	08001d25 	.word	0x08001d25
 8001d78:	08001d25 	.word	0x08001d25
 8001d7c:	08001ecf 	.word	0x08001ecf
 8001d80:	08001d25 	.word	0x08001d25
 8001d84:	08001dd5 	.word	0x08001dd5
 8001d88:	08001d25 	.word	0x08001d25
 8001d8c:	08001d25 	.word	0x08001d25
 8001d90:	08001e6f 	.word	0x08001e6f
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	1d1a      	adds	r2, r3, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	602a      	str	r2, [r5, #0]
 8001d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001da0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001da4:	2301      	movs	r3, #1
 8001da6:	e09f      	b.n	8001ee8 <_printf_i+0x1ec>
 8001da8:	6820      	ldr	r0, [r4, #0]
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	0607      	lsls	r7, r0, #24
 8001dae:	f103 0104 	add.w	r1, r3, #4
 8001db2:	6029      	str	r1, [r5, #0]
 8001db4:	d501      	bpl.n	8001dba <_printf_i+0xbe>
 8001db6:	681e      	ldr	r6, [r3, #0]
 8001db8:	e003      	b.n	8001dc2 <_printf_i+0xc6>
 8001dba:	0646      	lsls	r6, r0, #25
 8001dbc:	d5fb      	bpl.n	8001db6 <_printf_i+0xba>
 8001dbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001dc2:	2e00      	cmp	r6, #0
 8001dc4:	da03      	bge.n	8001dce <_printf_i+0xd2>
 8001dc6:	232d      	movs	r3, #45	; 0x2d
 8001dc8:	4276      	negs	r6, r6
 8001dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001dce:	485a      	ldr	r0, [pc, #360]	; (8001f38 <_printf_i+0x23c>)
 8001dd0:	230a      	movs	r3, #10
 8001dd2:	e012      	b.n	8001dfa <_printf_i+0xfe>
 8001dd4:	682b      	ldr	r3, [r5, #0]
 8001dd6:	6820      	ldr	r0, [r4, #0]
 8001dd8:	1d19      	adds	r1, r3, #4
 8001dda:	6029      	str	r1, [r5, #0]
 8001ddc:	0605      	lsls	r5, r0, #24
 8001dde:	d501      	bpl.n	8001de4 <_printf_i+0xe8>
 8001de0:	681e      	ldr	r6, [r3, #0]
 8001de2:	e002      	b.n	8001dea <_printf_i+0xee>
 8001de4:	0641      	lsls	r1, r0, #25
 8001de6:	d5fb      	bpl.n	8001de0 <_printf_i+0xe4>
 8001de8:	881e      	ldrh	r6, [r3, #0]
 8001dea:	4853      	ldr	r0, [pc, #332]	; (8001f38 <_printf_i+0x23c>)
 8001dec:	2f6f      	cmp	r7, #111	; 0x6f
 8001dee:	bf0c      	ite	eq
 8001df0:	2308      	moveq	r3, #8
 8001df2:	230a      	movne	r3, #10
 8001df4:	2100      	movs	r1, #0
 8001df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001dfa:	6865      	ldr	r5, [r4, #4]
 8001dfc:	60a5      	str	r5, [r4, #8]
 8001dfe:	2d00      	cmp	r5, #0
 8001e00:	bfa2      	ittt	ge
 8001e02:	6821      	ldrge	r1, [r4, #0]
 8001e04:	f021 0104 	bicge.w	r1, r1, #4
 8001e08:	6021      	strge	r1, [r4, #0]
 8001e0a:	b90e      	cbnz	r6, 8001e10 <_printf_i+0x114>
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	d04b      	beq.n	8001ea8 <_printf_i+0x1ac>
 8001e10:	4615      	mov	r5, r2
 8001e12:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e16:	fb03 6711 	mls	r7, r3, r1, r6
 8001e1a:	5dc7      	ldrb	r7, [r0, r7]
 8001e1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e20:	4637      	mov	r7, r6
 8001e22:	42bb      	cmp	r3, r7
 8001e24:	460e      	mov	r6, r1
 8001e26:	d9f4      	bls.n	8001e12 <_printf_i+0x116>
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d10b      	bne.n	8001e44 <_printf_i+0x148>
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	07de      	lsls	r6, r3, #31
 8001e30:	d508      	bpl.n	8001e44 <_printf_i+0x148>
 8001e32:	6923      	ldr	r3, [r4, #16]
 8001e34:	6861      	ldr	r1, [r4, #4]
 8001e36:	4299      	cmp	r1, r3
 8001e38:	bfde      	ittt	le
 8001e3a:	2330      	movle	r3, #48	; 0x30
 8001e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001e40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001e44:	1b52      	subs	r2, r2, r5
 8001e46:	6122      	str	r2, [r4, #16]
 8001e48:	f8cd a000 	str.w	sl, [sp]
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	aa03      	add	r2, sp, #12
 8001e50:	4621      	mov	r1, r4
 8001e52:	4640      	mov	r0, r8
 8001e54:	f7ff fee4 	bl	8001c20 <_printf_common>
 8001e58:	3001      	adds	r0, #1
 8001e5a:	d14a      	bne.n	8001ef2 <_printf_i+0x1f6>
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e60:	b004      	add	sp, #16
 8001e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	6023      	str	r3, [r4, #0]
 8001e6e:	4833      	ldr	r0, [pc, #204]	; (8001f3c <_printf_i+0x240>)
 8001e70:	2778      	movs	r7, #120	; 0x78
 8001e72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	6829      	ldr	r1, [r5, #0]
 8001e7a:	061f      	lsls	r7, r3, #24
 8001e7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e80:	d402      	bmi.n	8001e88 <_printf_i+0x18c>
 8001e82:	065f      	lsls	r7, r3, #25
 8001e84:	bf48      	it	mi
 8001e86:	b2b6      	uxthmi	r6, r6
 8001e88:	07df      	lsls	r7, r3, #31
 8001e8a:	bf48      	it	mi
 8001e8c:	f043 0320 	orrmi.w	r3, r3, #32
 8001e90:	6029      	str	r1, [r5, #0]
 8001e92:	bf48      	it	mi
 8001e94:	6023      	strmi	r3, [r4, #0]
 8001e96:	b91e      	cbnz	r6, 8001ea0 <_printf_i+0x1a4>
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	f023 0320 	bic.w	r3, r3, #32
 8001e9e:	6023      	str	r3, [r4, #0]
 8001ea0:	2310      	movs	r3, #16
 8001ea2:	e7a7      	b.n	8001df4 <_printf_i+0xf8>
 8001ea4:	4824      	ldr	r0, [pc, #144]	; (8001f38 <_printf_i+0x23c>)
 8001ea6:	e7e4      	b.n	8001e72 <_printf_i+0x176>
 8001ea8:	4615      	mov	r5, r2
 8001eaa:	e7bd      	b.n	8001e28 <_printf_i+0x12c>
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	6826      	ldr	r6, [r4, #0]
 8001eb0:	6961      	ldr	r1, [r4, #20]
 8001eb2:	1d18      	adds	r0, r3, #4
 8001eb4:	6028      	str	r0, [r5, #0]
 8001eb6:	0635      	lsls	r5, r6, #24
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	d501      	bpl.n	8001ec0 <_printf_i+0x1c4>
 8001ebc:	6019      	str	r1, [r3, #0]
 8001ebe:	e002      	b.n	8001ec6 <_printf_i+0x1ca>
 8001ec0:	0670      	lsls	r0, r6, #25
 8001ec2:	d5fb      	bpl.n	8001ebc <_printf_i+0x1c0>
 8001ec4:	8019      	strh	r1, [r3, #0]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6123      	str	r3, [r4, #16]
 8001eca:	4615      	mov	r5, r2
 8001ecc:	e7bc      	b.n	8001e48 <_printf_i+0x14c>
 8001ece:	682b      	ldr	r3, [r5, #0]
 8001ed0:	1d1a      	adds	r2, r3, #4
 8001ed2:	602a      	str	r2, [r5, #0]
 8001ed4:	681d      	ldr	r5, [r3, #0]
 8001ed6:	6862      	ldr	r2, [r4, #4]
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4628      	mov	r0, r5
 8001edc:	f7fe f998 	bl	8000210 <memchr>
 8001ee0:	b108      	cbz	r0, 8001ee6 <_printf_i+0x1ea>
 8001ee2:	1b40      	subs	r0, r0, r5
 8001ee4:	6060      	str	r0, [r4, #4]
 8001ee6:	6863      	ldr	r3, [r4, #4]
 8001ee8:	6123      	str	r3, [r4, #16]
 8001eea:	2300      	movs	r3, #0
 8001eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ef0:	e7aa      	b.n	8001e48 <_printf_i+0x14c>
 8001ef2:	6923      	ldr	r3, [r4, #16]
 8001ef4:	462a      	mov	r2, r5
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	4640      	mov	r0, r8
 8001efa:	47d0      	blx	sl
 8001efc:	3001      	adds	r0, #1
 8001efe:	d0ad      	beq.n	8001e5c <_printf_i+0x160>
 8001f00:	6823      	ldr	r3, [r4, #0]
 8001f02:	079b      	lsls	r3, r3, #30
 8001f04:	d413      	bmi.n	8001f2e <_printf_i+0x232>
 8001f06:	68e0      	ldr	r0, [r4, #12]
 8001f08:	9b03      	ldr	r3, [sp, #12]
 8001f0a:	4298      	cmp	r0, r3
 8001f0c:	bfb8      	it	lt
 8001f0e:	4618      	movlt	r0, r3
 8001f10:	e7a6      	b.n	8001e60 <_printf_i+0x164>
 8001f12:	2301      	movs	r3, #1
 8001f14:	4632      	mov	r2, r6
 8001f16:	4649      	mov	r1, r9
 8001f18:	4640      	mov	r0, r8
 8001f1a:	47d0      	blx	sl
 8001f1c:	3001      	adds	r0, #1
 8001f1e:	d09d      	beq.n	8001e5c <_printf_i+0x160>
 8001f20:	3501      	adds	r5, #1
 8001f22:	68e3      	ldr	r3, [r4, #12]
 8001f24:	9903      	ldr	r1, [sp, #12]
 8001f26:	1a5b      	subs	r3, r3, r1
 8001f28:	42ab      	cmp	r3, r5
 8001f2a:	dcf2      	bgt.n	8001f12 <_printf_i+0x216>
 8001f2c:	e7eb      	b.n	8001f06 <_printf_i+0x20a>
 8001f2e:	2500      	movs	r5, #0
 8001f30:	f104 0619 	add.w	r6, r4, #25
 8001f34:	e7f5      	b.n	8001f22 <_printf_i+0x226>
 8001f36:	bf00      	nop
 8001f38:	08002321 	.word	0x08002321
 8001f3c:	08002332 	.word	0x08002332

08001f40 <__sflush_r>:
 8001f40:	898a      	ldrh	r2, [r1, #12]
 8001f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f44:	4605      	mov	r5, r0
 8001f46:	0710      	lsls	r0, r2, #28
 8001f48:	460c      	mov	r4, r1
 8001f4a:	d457      	bmi.n	8001ffc <__sflush_r+0xbc>
 8001f4c:	684b      	ldr	r3, [r1, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	dc04      	bgt.n	8001f5c <__sflush_r+0x1c>
 8001f52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	dc01      	bgt.n	8001f5c <__sflush_r+0x1c>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f5e:	2e00      	cmp	r6, #0
 8001f60:	d0fa      	beq.n	8001f58 <__sflush_r+0x18>
 8001f62:	2300      	movs	r3, #0
 8001f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f68:	682f      	ldr	r7, [r5, #0]
 8001f6a:	6a21      	ldr	r1, [r4, #32]
 8001f6c:	602b      	str	r3, [r5, #0]
 8001f6e:	d032      	beq.n	8001fd6 <__sflush_r+0x96>
 8001f70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f72:	89a3      	ldrh	r3, [r4, #12]
 8001f74:	075a      	lsls	r2, r3, #29
 8001f76:	d505      	bpl.n	8001f84 <__sflush_r+0x44>
 8001f78:	6863      	ldr	r3, [r4, #4]
 8001f7a:	1ac0      	subs	r0, r0, r3
 8001f7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f7e:	b10b      	cbz	r3, 8001f84 <__sflush_r+0x44>
 8001f80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f82:	1ac0      	subs	r0, r0, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	4602      	mov	r2, r0
 8001f88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f8a:	6a21      	ldr	r1, [r4, #32]
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	47b0      	blx	r6
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	89a3      	ldrh	r3, [r4, #12]
 8001f94:	d106      	bne.n	8001fa4 <__sflush_r+0x64>
 8001f96:	6829      	ldr	r1, [r5, #0]
 8001f98:	291d      	cmp	r1, #29
 8001f9a:	d82b      	bhi.n	8001ff4 <__sflush_r+0xb4>
 8001f9c:	4a28      	ldr	r2, [pc, #160]	; (8002040 <__sflush_r+0x100>)
 8001f9e:	410a      	asrs	r2, r1
 8001fa0:	07d6      	lsls	r6, r2, #31
 8001fa2:	d427      	bmi.n	8001ff4 <__sflush_r+0xb4>
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6062      	str	r2, [r4, #4]
 8001fa8:	04d9      	lsls	r1, r3, #19
 8001faa:	6922      	ldr	r2, [r4, #16]
 8001fac:	6022      	str	r2, [r4, #0]
 8001fae:	d504      	bpl.n	8001fba <__sflush_r+0x7a>
 8001fb0:	1c42      	adds	r2, r0, #1
 8001fb2:	d101      	bne.n	8001fb8 <__sflush_r+0x78>
 8001fb4:	682b      	ldr	r3, [r5, #0]
 8001fb6:	b903      	cbnz	r3, 8001fba <__sflush_r+0x7a>
 8001fb8:	6560      	str	r0, [r4, #84]	; 0x54
 8001fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fbc:	602f      	str	r7, [r5, #0]
 8001fbe:	2900      	cmp	r1, #0
 8001fc0:	d0ca      	beq.n	8001f58 <__sflush_r+0x18>
 8001fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fc6:	4299      	cmp	r1, r3
 8001fc8:	d002      	beq.n	8001fd0 <__sflush_r+0x90>
 8001fca:	4628      	mov	r0, r5
 8001fcc:	f7ff fbf0 	bl	80017b0 <_free_r>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	6360      	str	r0, [r4, #52]	; 0x34
 8001fd4:	e7c1      	b.n	8001f5a <__sflush_r+0x1a>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	4628      	mov	r0, r5
 8001fda:	47b0      	blx	r6
 8001fdc:	1c41      	adds	r1, r0, #1
 8001fde:	d1c8      	bne.n	8001f72 <__sflush_r+0x32>
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0c5      	beq.n	8001f72 <__sflush_r+0x32>
 8001fe6:	2b1d      	cmp	r3, #29
 8001fe8:	d001      	beq.n	8001fee <__sflush_r+0xae>
 8001fea:	2b16      	cmp	r3, #22
 8001fec:	d101      	bne.n	8001ff2 <__sflush_r+0xb2>
 8001fee:	602f      	str	r7, [r5, #0]
 8001ff0:	e7b2      	b.n	8001f58 <__sflush_r+0x18>
 8001ff2:	89a3      	ldrh	r3, [r4, #12]
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff8:	81a3      	strh	r3, [r4, #12]
 8001ffa:	e7ae      	b.n	8001f5a <__sflush_r+0x1a>
 8001ffc:	690f      	ldr	r7, [r1, #16]
 8001ffe:	2f00      	cmp	r7, #0
 8002000:	d0aa      	beq.n	8001f58 <__sflush_r+0x18>
 8002002:	0793      	lsls	r3, r2, #30
 8002004:	680e      	ldr	r6, [r1, #0]
 8002006:	bf08      	it	eq
 8002008:	694b      	ldreq	r3, [r1, #20]
 800200a:	600f      	str	r7, [r1, #0]
 800200c:	bf18      	it	ne
 800200e:	2300      	movne	r3, #0
 8002010:	1bf6      	subs	r6, r6, r7
 8002012:	608b      	str	r3, [r1, #8]
 8002014:	2e00      	cmp	r6, #0
 8002016:	dd9f      	ble.n	8001f58 <__sflush_r+0x18>
 8002018:	6a21      	ldr	r1, [r4, #32]
 800201a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800201e:	4633      	mov	r3, r6
 8002020:	463a      	mov	r2, r7
 8002022:	4628      	mov	r0, r5
 8002024:	47e0      	blx	ip
 8002026:	2800      	cmp	r0, #0
 8002028:	dc06      	bgt.n	8002038 <__sflush_r+0xf8>
 800202a:	89a3      	ldrh	r3, [r4, #12]
 800202c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002030:	81a3      	strh	r3, [r4, #12]
 8002032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002036:	e790      	b.n	8001f5a <__sflush_r+0x1a>
 8002038:	4407      	add	r7, r0
 800203a:	1a36      	subs	r6, r6, r0
 800203c:	e7ea      	b.n	8002014 <__sflush_r+0xd4>
 800203e:	bf00      	nop
 8002040:	dfbffffe 	.word	0xdfbffffe

08002044 <_fflush_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	690b      	ldr	r3, [r1, #16]
 8002048:	4605      	mov	r5, r0
 800204a:	460c      	mov	r4, r1
 800204c:	b913      	cbnz	r3, 8002054 <_fflush_r+0x10>
 800204e:	2500      	movs	r5, #0
 8002050:	4628      	mov	r0, r5
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	b118      	cbz	r0, 800205e <_fflush_r+0x1a>
 8002056:	6a03      	ldr	r3, [r0, #32]
 8002058:	b90b      	cbnz	r3, 800205e <_fflush_r+0x1a>
 800205a:	f7ff faa1 	bl	80015a0 <__sinit>
 800205e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f3      	beq.n	800204e <_fflush_r+0xa>
 8002066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002068:	07d0      	lsls	r0, r2, #31
 800206a:	d404      	bmi.n	8002076 <_fflush_r+0x32>
 800206c:	0599      	lsls	r1, r3, #22
 800206e:	d402      	bmi.n	8002076 <_fflush_r+0x32>
 8002070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002072:	f7ff fb9a 	bl	80017aa <__retarget_lock_acquire_recursive>
 8002076:	4628      	mov	r0, r5
 8002078:	4621      	mov	r1, r4
 800207a:	f7ff ff61 	bl	8001f40 <__sflush_r>
 800207e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002080:	07da      	lsls	r2, r3, #31
 8002082:	4605      	mov	r5, r0
 8002084:	d4e4      	bmi.n	8002050 <_fflush_r+0xc>
 8002086:	89a3      	ldrh	r3, [r4, #12]
 8002088:	059b      	lsls	r3, r3, #22
 800208a:	d4e1      	bmi.n	8002050 <_fflush_r+0xc>
 800208c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800208e:	f7ff fb8d 	bl	80017ac <__retarget_lock_release_recursive>
 8002092:	e7dd      	b.n	8002050 <_fflush_r+0xc>

08002094 <__swbuf_r>:
 8002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002096:	460e      	mov	r6, r1
 8002098:	4614      	mov	r4, r2
 800209a:	4605      	mov	r5, r0
 800209c:	b118      	cbz	r0, 80020a6 <__swbuf_r+0x12>
 800209e:	6a03      	ldr	r3, [r0, #32]
 80020a0:	b90b      	cbnz	r3, 80020a6 <__swbuf_r+0x12>
 80020a2:	f7ff fa7d 	bl	80015a0 <__sinit>
 80020a6:	69a3      	ldr	r3, [r4, #24]
 80020a8:	60a3      	str	r3, [r4, #8]
 80020aa:	89a3      	ldrh	r3, [r4, #12]
 80020ac:	071a      	lsls	r2, r3, #28
 80020ae:	d525      	bpl.n	80020fc <__swbuf_r+0x68>
 80020b0:	6923      	ldr	r3, [r4, #16]
 80020b2:	b31b      	cbz	r3, 80020fc <__swbuf_r+0x68>
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	6922      	ldr	r2, [r4, #16]
 80020b8:	1a98      	subs	r0, r3, r2
 80020ba:	6963      	ldr	r3, [r4, #20]
 80020bc:	b2f6      	uxtb	r6, r6
 80020be:	4283      	cmp	r3, r0
 80020c0:	4637      	mov	r7, r6
 80020c2:	dc04      	bgt.n	80020ce <__swbuf_r+0x3a>
 80020c4:	4621      	mov	r1, r4
 80020c6:	4628      	mov	r0, r5
 80020c8:	f7ff ffbc 	bl	8002044 <_fflush_r>
 80020cc:	b9e0      	cbnz	r0, 8002108 <__swbuf_r+0x74>
 80020ce:	68a3      	ldr	r3, [r4, #8]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	60a3      	str	r3, [r4, #8]
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	701e      	strb	r6, [r3, #0]
 80020dc:	6962      	ldr	r2, [r4, #20]
 80020de:	1c43      	adds	r3, r0, #1
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d004      	beq.n	80020ee <__swbuf_r+0x5a>
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	07db      	lsls	r3, r3, #31
 80020e8:	d506      	bpl.n	80020f8 <__swbuf_r+0x64>
 80020ea:	2e0a      	cmp	r6, #10
 80020ec:	d104      	bne.n	80020f8 <__swbuf_r+0x64>
 80020ee:	4621      	mov	r1, r4
 80020f0:	4628      	mov	r0, r5
 80020f2:	f7ff ffa7 	bl	8002044 <_fflush_r>
 80020f6:	b938      	cbnz	r0, 8002108 <__swbuf_r+0x74>
 80020f8:	4638      	mov	r0, r7
 80020fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020fc:	4621      	mov	r1, r4
 80020fe:	4628      	mov	r0, r5
 8002100:	f000 f806 	bl	8002110 <__swsetup_r>
 8002104:	2800      	cmp	r0, #0
 8002106:	d0d5      	beq.n	80020b4 <__swbuf_r+0x20>
 8002108:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800210c:	e7f4      	b.n	80020f8 <__swbuf_r+0x64>
	...

08002110 <__swsetup_r>:
 8002110:	b538      	push	{r3, r4, r5, lr}
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <__swsetup_r+0xac>)
 8002114:	4605      	mov	r5, r0
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	460c      	mov	r4, r1
 800211a:	b118      	cbz	r0, 8002124 <__swsetup_r+0x14>
 800211c:	6a03      	ldr	r3, [r0, #32]
 800211e:	b90b      	cbnz	r3, 8002124 <__swsetup_r+0x14>
 8002120:	f7ff fa3e 	bl	80015a0 <__sinit>
 8002124:	89a3      	ldrh	r3, [r4, #12]
 8002126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800212a:	0718      	lsls	r0, r3, #28
 800212c:	d422      	bmi.n	8002174 <__swsetup_r+0x64>
 800212e:	06d9      	lsls	r1, r3, #27
 8002130:	d407      	bmi.n	8002142 <__swsetup_r+0x32>
 8002132:	2309      	movs	r3, #9
 8002134:	602b      	str	r3, [r5, #0]
 8002136:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800213a:	81a3      	strh	r3, [r4, #12]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002140:	e034      	b.n	80021ac <__swsetup_r+0x9c>
 8002142:	0758      	lsls	r0, r3, #29
 8002144:	d512      	bpl.n	800216c <__swsetup_r+0x5c>
 8002146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002148:	b141      	cbz	r1, 800215c <__swsetup_r+0x4c>
 800214a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800214e:	4299      	cmp	r1, r3
 8002150:	d002      	beq.n	8002158 <__swsetup_r+0x48>
 8002152:	4628      	mov	r0, r5
 8002154:	f7ff fb2c 	bl	80017b0 <_free_r>
 8002158:	2300      	movs	r3, #0
 800215a:	6363      	str	r3, [r4, #52]	; 0x34
 800215c:	89a3      	ldrh	r3, [r4, #12]
 800215e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002162:	81a3      	strh	r3, [r4, #12]
 8002164:	2300      	movs	r3, #0
 8002166:	6063      	str	r3, [r4, #4]
 8002168:	6923      	ldr	r3, [r4, #16]
 800216a:	6023      	str	r3, [r4, #0]
 800216c:	89a3      	ldrh	r3, [r4, #12]
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	81a3      	strh	r3, [r4, #12]
 8002174:	6923      	ldr	r3, [r4, #16]
 8002176:	b94b      	cbnz	r3, 800218c <__swsetup_r+0x7c>
 8002178:	89a3      	ldrh	r3, [r4, #12]
 800217a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800217e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002182:	d003      	beq.n	800218c <__swsetup_r+0x7c>
 8002184:	4621      	mov	r1, r4
 8002186:	4628      	mov	r0, r5
 8002188:	f000 f850 	bl	800222c <__smakebuf_r>
 800218c:	89a0      	ldrh	r0, [r4, #12]
 800218e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002192:	f010 0301 	ands.w	r3, r0, #1
 8002196:	d00a      	beq.n	80021ae <__swsetup_r+0x9e>
 8002198:	2300      	movs	r3, #0
 800219a:	60a3      	str	r3, [r4, #8]
 800219c:	6963      	ldr	r3, [r4, #20]
 800219e:	425b      	negs	r3, r3
 80021a0:	61a3      	str	r3, [r4, #24]
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	b943      	cbnz	r3, 80021b8 <__swsetup_r+0xa8>
 80021a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021aa:	d1c4      	bne.n	8002136 <__swsetup_r+0x26>
 80021ac:	bd38      	pop	{r3, r4, r5, pc}
 80021ae:	0781      	lsls	r1, r0, #30
 80021b0:	bf58      	it	pl
 80021b2:	6963      	ldrpl	r3, [r4, #20]
 80021b4:	60a3      	str	r3, [r4, #8]
 80021b6:	e7f4      	b.n	80021a2 <__swsetup_r+0x92>
 80021b8:	2000      	movs	r0, #0
 80021ba:	e7f7      	b.n	80021ac <__swsetup_r+0x9c>
 80021bc:	2000005c 	.word	0x2000005c

080021c0 <_sbrk_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4d06      	ldr	r5, [pc, #24]	; (80021dc <_sbrk_r+0x1c>)
 80021c4:	2300      	movs	r3, #0
 80021c6:	4604      	mov	r4, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	602b      	str	r3, [r5, #0]
 80021cc:	f7ff f8ec 	bl	80013a8 <_sbrk>
 80021d0:	1c43      	adds	r3, r0, #1
 80021d2:	d102      	bne.n	80021da <_sbrk_r+0x1a>
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	b103      	cbz	r3, 80021da <_sbrk_r+0x1a>
 80021d8:	6023      	str	r3, [r4, #0]
 80021da:	bd38      	pop	{r3, r4, r5, pc}
 80021dc:	20000478 	.word	0x20000478

080021e0 <__swhatbuf_r>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	460c      	mov	r4, r1
 80021e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e8:	2900      	cmp	r1, #0
 80021ea:	b096      	sub	sp, #88	; 0x58
 80021ec:	4615      	mov	r5, r2
 80021ee:	461e      	mov	r6, r3
 80021f0:	da0d      	bge.n	800220e <__swhatbuf_r+0x2e>
 80021f2:	89a3      	ldrh	r3, [r4, #12]
 80021f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	bf0c      	ite	eq
 80021fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002202:	2340      	movne	r3, #64	; 0x40
 8002204:	2000      	movs	r0, #0
 8002206:	6031      	str	r1, [r6, #0]
 8002208:	602b      	str	r3, [r5, #0]
 800220a:	b016      	add	sp, #88	; 0x58
 800220c:	bd70      	pop	{r4, r5, r6, pc}
 800220e:	466a      	mov	r2, sp
 8002210:	f000 f848 	bl	80022a4 <_fstat_r>
 8002214:	2800      	cmp	r0, #0
 8002216:	dbec      	blt.n	80021f2 <__swhatbuf_r+0x12>
 8002218:	9901      	ldr	r1, [sp, #4]
 800221a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800221e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002222:	4259      	negs	r1, r3
 8002224:	4159      	adcs	r1, r3
 8002226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222a:	e7eb      	b.n	8002204 <__swhatbuf_r+0x24>

0800222c <__smakebuf_r>:
 800222c:	898b      	ldrh	r3, [r1, #12]
 800222e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002230:	079d      	lsls	r5, r3, #30
 8002232:	4606      	mov	r6, r0
 8002234:	460c      	mov	r4, r1
 8002236:	d507      	bpl.n	8002248 <__smakebuf_r+0x1c>
 8002238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	6123      	str	r3, [r4, #16]
 8002240:	2301      	movs	r3, #1
 8002242:	6163      	str	r3, [r4, #20]
 8002244:	b002      	add	sp, #8
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	ab01      	add	r3, sp, #4
 800224a:	466a      	mov	r2, sp
 800224c:	f7ff ffc8 	bl	80021e0 <__swhatbuf_r>
 8002250:	9900      	ldr	r1, [sp, #0]
 8002252:	4605      	mov	r5, r0
 8002254:	4630      	mov	r0, r6
 8002256:	f7ff fb15 	bl	8001884 <_malloc_r>
 800225a:	b948      	cbnz	r0, 8002270 <__smakebuf_r+0x44>
 800225c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002260:	059a      	lsls	r2, r3, #22
 8002262:	d4ef      	bmi.n	8002244 <__smakebuf_r+0x18>
 8002264:	f023 0303 	bic.w	r3, r3, #3
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	81a3      	strh	r3, [r4, #12]
 800226e:	e7e3      	b.n	8002238 <__smakebuf_r+0xc>
 8002270:	89a3      	ldrh	r3, [r4, #12]
 8002272:	6020      	str	r0, [r4, #0]
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	81a3      	strh	r3, [r4, #12]
 800227a:	9b00      	ldr	r3, [sp, #0]
 800227c:	6163      	str	r3, [r4, #20]
 800227e:	9b01      	ldr	r3, [sp, #4]
 8002280:	6120      	str	r0, [r4, #16]
 8002282:	b15b      	cbz	r3, 800229c <__smakebuf_r+0x70>
 8002284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002288:	4630      	mov	r0, r6
 800228a:	f000 f81d 	bl	80022c8 <_isatty_r>
 800228e:	b128      	cbz	r0, 800229c <__smakebuf_r+0x70>
 8002290:	89a3      	ldrh	r3, [r4, #12]
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	81a3      	strh	r3, [r4, #12]
 800229c:	89a3      	ldrh	r3, [r4, #12]
 800229e:	431d      	orrs	r5, r3
 80022a0:	81a5      	strh	r5, [r4, #12]
 80022a2:	e7cf      	b.n	8002244 <__smakebuf_r+0x18>

080022a4 <_fstat_r>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4d07      	ldr	r5, [pc, #28]	; (80022c4 <_fstat_r+0x20>)
 80022a8:	2300      	movs	r3, #0
 80022aa:	4604      	mov	r4, r0
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	f7ff f8be 	bl	8001432 <_fstat>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	d102      	bne.n	80022c0 <_fstat_r+0x1c>
 80022ba:	682b      	ldr	r3, [r5, #0]
 80022bc:	b103      	cbz	r3, 80022c0 <_fstat_r+0x1c>
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	bd38      	pop	{r3, r4, r5, pc}
 80022c2:	bf00      	nop
 80022c4:	20000478 	.word	0x20000478

080022c8 <_isatty_r>:
 80022c8:	b538      	push	{r3, r4, r5, lr}
 80022ca:	4d06      	ldr	r5, [pc, #24]	; (80022e4 <_isatty_r+0x1c>)
 80022cc:	2300      	movs	r3, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	602b      	str	r3, [r5, #0]
 80022d4:	f7ff f8bb 	bl	800144e <_isatty>
 80022d8:	1c43      	adds	r3, r0, #1
 80022da:	d102      	bne.n	80022e2 <_isatty_r+0x1a>
 80022dc:	682b      	ldr	r3, [r5, #0]
 80022de:	b103      	cbz	r3, 80022e2 <_isatty_r+0x1a>
 80022e0:	6023      	str	r3, [r4, #0]
 80022e2:	bd38      	pop	{r3, r4, r5, pc}
 80022e4:	20000478 	.word	0x20000478

080022e8 <_init>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr

080022f4 <_fini>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr
